---
title: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming
author: "Week 1: Foundations of R programming"
format:
  beamer:
    pdf-engine: pdflatex
    aspectratio: 169
    fontsize: "14pt,t"
    section-titles: false
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: ../header.tex
    keep_tex: yes
---

```{r setup, include=FALSE}
source(here::here("setup.R"))
source(here::here("course_info.R"))
```

## Outline

\vspace*{0.4cm}
\tableofcontents

# Names and values

## Quiz
\fontsize{12.5}{13}\sf

1.  Given the following data frame, how do I create a new column called "3"
    that contains the sum of `1` and `2`? You may only use `$`, not `[[`.
    What makes `1`, `2`, and `3` challenging as variable names?

    ```{r}
    df <- data.frame(runif(3), runif(3))
    names(df) <- c(1, 2)
    ```

2.  In the following code, how much memory does `y` occupy?

    ```{r}
    x <- runif(1e6)
    y <- list(x, x, x)
    ```

3.  On which line does `a` get copied in the following example?

    ```{r}
    a <- c(1, 5, 3, 2)
    b <- a
    b[[1]] <- 10
    ```


## Binding basics

```{r bind1}
x <- c(1, 2, 3)
```

\vspace*{0.2cm}

* Creates an object, a vector of values, `c(1, 2, 3)`.
* Binds that object to a name, `x`.
* A name is a reference (or pointer) to a value.

\placefig{8}{1.4}{width=3.5cm, height=20cm}{../diagrams/name-value/binding-1.png}\pause\vspace*{1cm}

```{r bind2, dependson = "bind1"}
y <- x
```

* Binds the same object to a new name, `y`.

\only<2>{\placefig{8}{5}{width=3.5cm, height=20cm}{../diagrams/name-value/binding-2.png}}

\vspace*{10cm}

## Binding basics

```{r bind3, dependson = "bind2"}
library(lobstr)
obj_addr(x)
obj_addr(y)
```

These identifiers are long, and change every time you restart R.

## Syntactic names {#non-syntactic}
\fontsize{13}{15}\sf

A __syntactic__ name:

* must consist of letters, digits, `.` and `_`
* can't begin with `_`, or a digit, or a `.` followed by a digit
* can't be a __reserved word__ like `TRUE`, `NULL`, `if`, and `function`

```{r, eval = FALSE}
_abc <- 1
#> Error: unexpected input in "_"

if <- 10
#> Error: unexpected assignment in "if <-"
```

\pause

It's possible to override these rules using backticks.

```{r}
`_abc` <- 1
`_abc`
```

## Copy-on-modify

Consider the following code. It binds `x` and `y` to the same underlying value, then modifies `y`.

```{r}
x <- c(1, 2, 3)
y <- x
```

\pause\vspace*{1.5cm}

```{r}
y[[3]] <- 4
x
```

\placefig{10}{2.7}{width=3.5cm, height=20cm}{../diagrams/name-value/binding-2.png}

\only<2>{\placefig{10}{6}{width=3.5cm, height=20cm}{../diagrams/name-value/binding-3.png}}

## `tracemem()`

You can see when an object gets copied using `tracemem()`. \fontsize{9}{9}\sf

```{r trace1}
x <- c(1, 2, 3)
tracemem(x)
```

```{r trace2, dependson = "trace1"}
y <- x
y[[3]] <- 4L
```

```{r trace3, dependson = "trace2"}
y[[3]] <- 5L
untracemem(x)
```

## Modify-in-place

If an object has a single name bound to it, R will modify it in place:

```{r}
v <- c(1, 2, 3)
```

```{r, echo = FALSE, out.width = NULL}
knitr::include_graphics("../diagrams/name-value/v-inplace-1.png")
```

```{r}
v[[3]] <- 4
```

```{r, echo = FALSE, out.width = NULL}
knitr::include_graphics("../diagrams/name-value/v-inplace-2.png")
```

## Function calls

The same rules for copying also apply to function calls. \fontsize{9}{9}\sf

```{r}
f <- function(a) {
  a
}

x <- c(1, 2, 3)
tracemem(x)
z <- f(x)
# there's no copy here!
untracemem(x)
```

## Lists {#list-references}

Lists store references to their elements,\newline
not the elements themselves.

```{r list1}
l1 <- list(1, 2, 3)
```

\vspace*{1.4cm}

\placefig{11}{2.5}{width=3cm, height=20cm}{../diagrams/name-value/list.png}\pause

```{r list2, dependson = "list1"}
l2 <- l1
```

\vspace*{1.4cm}

\only<2->{\placefig{11}{4.5}{width=3cm, height=20cm}{../diagrams/name-value/l-modify-1.png}\pause}

```{r list3, dependson = "list2"}
l2[[3]] <- 4
```

\vspace*{1.5cm}

\only<3>{\placefig{11}{6.5}{width=3cm, height=20cm}{../diagrams/name-value/l-modify-2.png}}

\vspace*{10cm}

## Data frames {#df-modify}

Data frames are lists of vectors.

```{r}
d1 <- data.frame(x = c(1, 5, 6), y = c(2, 4, 3))
```

\vspace{1.5cm}
\placefig{9.8}{.7}{height=3.4cm, width=20cm}{../diagrams/name-value/dataframe.png}\pause

Modifying a column:

```{r}
d2 <- d1
d2[, 2] <- d2[, 2] * 2
```

\only<2>{\placefig{9.8}{4.2}{height=4.7cm, width=20cm}{../diagrams/name-value/d-modify-c.png}}

\vspace*{10cm}

## Data frames

Data frames are lists of vectors.

```{r}
d1 <- data.frame(x = c(1, 5, 6), y = c(2, 4, 3))
```
\vspace{1.5cm}
\placefig{9.8}{0.7}{height=3.4cm, width=20cm}{../diagrams/name-value/dataframe.png}

Modifying a row:

```{r}
d3 <- d1
d3[1, ] <- d3[1, ] * 3
```

\placefig{9.8}{4.2}{height=3.4cm, width=20cm}{../diagrams/name-value/d-modify-r.png}

\vspace*{10cm}

## Character vectors
\fontsize{13}{13.5}\sf

```{r}
x <- c("a", "a", "abc", "d")
```
```{r, echo = FALSE, out.width = NULL}
knitr::include_graphics("../diagrams/name-value/character.png")
```

* Not quite!
* R actually uses a __global string pool__ where each element is a pointer to a string in the pool

```{r, echo = FALSE, out.width = NULL}
knitr::include_graphics("../diagrams/name-value/character-2.png")
```

## Quiz

4.  Sketch out the relationship between the following objects:

    ```{r}
    a <- 1:10
    b <- list(a, a)
    c <- list(b, a, 1:10)
    ```

5.  What happens when you run this code?

    ```{r}
    x <- list(1:10)
    x[[2]] <- x
    ```

    Draw a picture.

## Object size

`lobstr::obj_size()` gives the size of an object in memory.
\fontsize{11}{11}\sf

```{r}
obj_size(ggplot2::diamonds)
banana <- "bananas bananas bananas"
obj_size(banana)
obj_size(rep(banana, 100))
```

## Object size

```{r}
x <- runif(1e6)
obj_size(x)
y <- list(x, x, x)
obj_size(y)
obj_size(x, y)
```

## ALTREP

```{r}
obj_size(1:3)
obj_size(1:1e6)
obj_size(c(1:1e6, 10))
obj_size(2 * (1:1e6))
```

## Quiz

6.  Predict the output of the following code:

    ```{r}
    #| eval: false
    a <- runif(1e6)
    obj_size(a)

    b <- list(a, a)
    obj_size(b)
    obj_size(a, b)

    b[[1]][[1]] <- 10
    obj_size(b)
    obj_size(a, b)

    b[[2]][[1]] <- 10
    obj_size(b)
    obj_size(a, b)
    ```

## For loops

Loops have a reputation for being slow, but often that is caused by iterations creating copies.
\fontsize{9}{9}\sf\vspace*{-0.2cm}

```{r}
#| output: false
x <- data.frame(matrix(runif(3 * 1e4), ncol = 3))
medians <- vapply(x, median, numeric(1))
tracemem(x)
```

\vspace*{-0.3cm}

```{r}
for (i in seq_along(medians)) {
  x[[i]] <- x[[i]] - medians[[i]]
}
```

\fontsize{13}{15}\sf

* Each iteration copies the data frame two times!

\vspace*{10cm}

## For loops

The same problem but with a list.
\fontsize{9}{9}\sf\vspace*{-0.2cm}

```{r}
#| output: false
y <- as.list(x)
tracemem(y)
```

\vspace*{-0.3cm}

```{r}
for (i in 1:3) {
  y[[i]] <- y[[i]] - medians[[i]]
}
```

\fontsize{13}{15}\sf

* Only one copy created

\vspace*{10cm}



## Unbinding and the garbage collector {#gc}

\placefig{10}{1.5}{width=3.5cm, height=20cm}{../diagrams/name-value/unbinding-1.png}
\only<2->{\placefig{10}{3.5}{width=3.5cm, height=20cm}{../diagrams/name-value/unbinding-2.png}}
\only<3>{\placefig{10}{6.2}{width=3.5cm, height=20cm}{../diagrams/name-value/unbinding-3.png}}


```{r}
x <- 1:3
```

\vspace*{1.5cm}\pause

```{r}
x <- 2:4
```

\vspace*{1.5cm}\pause

```{r}
rm(x)
```

\vspace*{10cm}

## Garbage collection

* Garbage collection (GC) frees up memory by deleting R objects that are no longer used, and by requesting more memory from the operating system if needed.
* R traces every object that's reachable from the global environment (recursively).
* GC runs automatically whenever R needs more memory to create a new object.
* You can force garbage collection by calling `gc()`. But it's *never* necessary.

# Vectors

## Vectors

\placefig{10}{0.1}{width=3.5cm, height=20cm}{../diagrams/vectors/summary-tree.png}\vspace*{0.2cm}

* Vectors come in two flavours: atomic vectors and lists
* For atomic vectors, all elements must have same type
* For lists, elements can have different types
* `NULL` is like a generic zero length vector
* Scalars are just vectors of length 1
* Every vector can also have __attributes__: a named list of arbitrary metadata.
* The __dimension__ attribute turns vectors into matrices and arrays.
* The __class__ attribute powers the S3 object system.

## Atomic vectors
\vspace*{-0.2cm}

* Four primary types of atomic vectors: logical, integer, double, and character (which contains strings).
* Collectively integer and double vectors are known as numeric vectors
* Two rare types:

  * complex
  * raw.

\vspace*{10cm}

\placefig{9}{3.8}{width=6cm, height=20cm}{../diagrams/vectors/summary-tree-atomic.png}

## Scalars

* Logicals: `TRUE` or `FALSE`, or abbreviated (`T` or `F`).

* Doubles: decimal (`0.1234`), scientific (`1.23e4`), or hexadecimal (`0xcafe`). Special values: `Inf`, `-Inf`, and `NaN` (not a number).

* Integers: `1234L`, `1e4L`, or `0xcafeL`. Can not contain fractional values.

* Strings: `"hi"` or `'bye'`. Special characters are escaped with `\`.

## Making longer vectors with `c()` {#atomic-constructing}

Use `c()` to create longer vectors from shorter ones.

```{r}
lgl_var <- c(TRUE, FALSE)
int_var <- c(1L, 6L, 10L)
dbl_var <- c(1, 2.5, 4.5)
chr_var <- c("these are", "some strings")
```
When the inputs are atomic vectors,\newline `c()` always flattens.

```{r}
c(c(1, 2), c(3, 4))
```

\placefig{9.8}{2.5}{width=6cm, height=20cm}{../diagrams/vectors/atomic.png}

## Types and length
\fontsize{13}{13}\sf

You can determine the type of a vector with `typeof()` and its length with `length()`.

\fontsize{10}{10}\sf


```{r}
typeof(lgl_var)
typeof(int_var)
typeof(dbl_var)
typeof(chr_var)
```

## Missing values

Most computations involving a missing value will return another missing value.

\fontsize{10}{10}\sf

```{r}
NA > 5
10 * NA
!NA
```

## Missing values

Exceptions:

\fontsize{10}{10}\sf

```{r}
NA ^ 0
NA | TRUE
NA & FALSE
```

## Missing values

Use `is.na()` to check for missingness

\fontsize{10}{10}\sf

```{r}
x <- c(NA, 5, NA, 10)
x == NA
is.na(x)
```

\fontsize{13}{14}\sf

There are actually four missing values:  `NA` (logical), `NA_integer_` (integer), `NA_real_` (double), and `NA_character_` (character).

## Coercion
\fontsize{13}{14}\sf\vspace*{-0.25cm}

* For atomic vectors, all elements must be the same type.
* When you combine different types they are __coerced__ in a fixed order: logical → integer → double → character.

\fontsize{10}{4}\sf

```{r}
str(c("a", 1))
x <- c(FALSE, FALSE, TRUE)
as.numeric(x)
sum(x)
as.integer(c("1", "1.5", "a"))
```

## Quiz

7.  Predict the output of the following:

    ```{r, eval=FALSE}
    c(1, FALSE)
    c("a", 1)
    c(TRUE, 1L)
    ```

8. Why is `1 == "1"` true? Why is `-1 < FALSE` true? Why is `"one" < 2` false?

9. Why is the default missing value, `NA`, a logical vector? What's special
   about logical vectors? (Hint: think about `c(FALSE, NA_character_)`.)

## Getting and setting attributes

* You can think of attributes as name-value pairs that attach metadata to an object.
* Individual attributes can be retrieved and modified with `attr()`, or retrieved en masse with `attributes()`, and set en masse with `structure()`.

\fontsize{10}{10}\sf

```{r}
a <- 1:3
attr(a, "x") <- "abcdef"
a
```

## Getting and setting attributes
\fontsize{10}{10}\sf

```{r}
attr(a, "y") <- 4:6
str(attributes(a))

# Or equivalently
a <- structure(
  1:3,
  x = "abcdef",
  y = 4:6
)
str(attributes(a))
```

\placefig{10}{1}{width=3.5cm, height=20cm}{../diagrams/vectors/attr.png}

## Names {#attr-names}

* Names are a type of attribute.
* You can name a vector in three ways:

\fontsize{10}{10}\sf

```{r}
# When creating it:
x <- c(a = 1, b = 2, c = 3)

# By assigning a character vector to names()
x <- 1:3
names(x) <- c("a", "b", "c")

# Inline, with setNames():
x <- setNames(1:3, c("a", "b", "c"))
```

```{r}
x
```

## Names

* Avoid using `attr(x, "names")` as it requires more typing and is less readable than `names(x)`.
* You can remove names from a vector by using\newline `x <- unname(x)` or `names(x) <- NULL`.


## Dimensions {#attr-dims}

* Adding a `dim` attribute to a vector allows it to behave like a 2-dimensional __matrix__ or a multi-dimensional __array__.
* You can create matrices and arrays with `matrix()` and `array()`, or by using the assignment form of `dim()`:

```{r}
# Two scalar arguments specify row and column sizes
x <- matrix(1:6, nrow = 2, ncol = 3)
x
```

## Dimensions

```{r}
# One vector argument to describe all dimensions
y <- array(1:12, c(2, 3, 2))
y
```

## Dimensions

```{r}
# You can also modify an object in place by setting dim()
z <- 1:6
dim(z) <- c(3, 2)
z
```

## Dimensions

Many of the functions for working with vectors have generalisations for matrices and arrays:

| Vector            | Matrix                     | Array            |
|-------------------|----------------------------|------------------|
| `names()`         | `rownames()`, `colnames()` | `dimnames()`     |
| `length()`        | `nrow()`, `ncol()`         | `dim()`          |
| `c()`             | `rbind()`, `cbind()`       | `abind::abind()` |
| ---               | `t()`                      | `aperm()`        |
| `is.null(dim(x))` | `is.matrix()`              | `is.array()`     |

## Dimensions

```{r}
str(1:3)                   # 1d vector
str(matrix(1:3, ncol = 1)) # column vector
str(matrix(1:3, nrow = 1)) # row vector
str(array(1:3, 3))         # "array" vector
```

## Quiz

10. What does `dim()` return when applied to a 1-dimensional vector?
11. When might you use `NROW()` or `NCOL()`?
12. How would you describe the following three objects? What makes them different from `1:5`?

    ```{r}
    x1 <- array(1:5, c(1, 1, 5))
    x2 <- array(1:5, c(1, 5, 1))
    x3 <- array(1:5, c(5, 1, 1))
    ```

## S3 atomic vectors

* `class` is a vector attribute.
* It turns object into __S3 object__.
* Four important S3 vectors:

  * **factor** vectors.
  * **Date** vectors with day resolution.
  * **POSIXct** vectors for date-times.
  * **difftime** vectors for durations.

\placefig{10}{2}{width=6cm}{../diagrams/vectors/summary-tree-s3-1.png}

## Factors

* A vector that can contain only predefined values.
* Used to store categorical data.
* Built on top of an integer vector with two attributes: a `class`, "factor", and `levels`, which defines the set of allowed values.

```{r}
x <- factor(c("a", "b", "b", "a"))
x
```

## Factors

```{r}
typeof(x)
attributes(x)
```

\placefig{10}{2}{width=5cm,height=20cm}{../diagrams/vectors/factor.png}

## Factors

```{r}
sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))

table(sex_char)
table(sex_factor)
```

## Factors

* Be careful: some functions convert factors to integers!
* ggplot preserves ordering of levels in graphs -- useful to reorder panels or legends.
* Ordered factors are useful when the order of levels is meaningful.

```{r}
grade <- ordered(c("b", "b", "a", "c"), levels = c("c", "b", "a"))
grade
```

## Dates

* Date vectors are built on top of double vectors.
* Class "Date" with no other attributes:

```{r}
today <- Sys.Date()

typeof(today)
attributes(today)
```

## Dates

The value of the double (which can be seen by stripping the class), represents the number of days since 1970-01-01 (the "Unix Epoch").

```{r}
date <- as.Date("1970-02-01")
unclass(date)
```

## Date-times

* Base R provides two ways of storing date-time information, POSIXct, and POSIXlt.
* "POSIX" is short for Portable Operating System Interface
* "ct" stands for calendar time; "lt" for local time
* POSIXct vectors are built on top of double vectors, where the value represents the number of seconds since 1970-01-01.

```{r}
now_ct <- as.POSIXct("2018-08-01 22:00", tz = "UTC")
now_ct

typeof(now_ct)
attributes(now_ct)
```

## Date-times

The `tzone` attribute controls only how the date-time is formatted; it does not control the instant of time represented by the vector. Note that the time is not printed if it is midnight.

\fontsize{10}{10}\sf

```{r}
structure(now_ct, tzone = "Asia/Tokyo")
structure(now_ct, tzone = "America/New_York")
structure(now_ct, tzone = "Australia/Lord_Howe")
```


## Quiz

13. What sort of object does `table()` return? What is its type? What
    attributes does it have? How does the dimensionality change as you
    tabulate more variables?

14. What happens to a factor when you modify its levels?

    ```{r, results = FALSE}
    f1 <- factor(letters)
    levels(f1) <- rev(levels(f1))
    ```

15. What does this code do? How do `f2` and `f3` differ from `f1`?

    ```{r, results = FALSE}
    f2 <- rev(factor(letters))
    f3 <- factor(letters, levels = rev(letters))
    ```


## Lists

* More complex than atomic vectors
* Elements are *references* to objects of any type

\fontsize{10}{10}\sf

```{r}
l1 <- list(
  1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9)
)
typeof(l1)
str(l1)
```

\placefig{10}{3.5}{width=5cm,height=20cm}{../diagrams/vectors/list.png}

## Lists

* Lists can be recursive:  a list can contain other lists.

```{r}
l3 <- list(list(list(1)))
str(l3)
```

\placefig{10}{4}{width=5cm,height=20cm}{../diagrams/vectors/list-recursive.png}

## Lists

* `c()` will combine several lists into one.

\fontsize{9}{9}\sf

```{r}
l4 <- list(list(1, 2), c(3, 4))
l5 <- c(list(1, 2), c(3, 4))
str(l4)
str(l5)
```

\placefig{10}{3}{width=5cm,height=20cm}{../diagrams/vectors/list-c.png}

## Testing and coercion {#list-types}

\fontsize{9}{9}\sf

```{r}
list(1:3)
as.list(1:3)
```

\fontsize{13}{14}\sf

* You can turn a list into an atomic vector with `unlist()`.

## Data frames and tibbles {#tibble}

\placefig{12}{0.5}{width=3cm,height=20cm}{../diagrams/vectors/summary-tree-s3-2.png}

* Most important S3 vectors built on lists:\newline data frames and tibbles.

\fontsize{10}{8}\sf

```{r}
df1 <- data.frame(x = 1:3, y = letters[1:3])
typeof(df1)
attributes(df1)
```

\placefig{10}{4.1}{width=5cm}{../diagrams/vectors/data-frame-1.png}

\placefig{7}{6}{width=5cm}{../diagrams/vectors/data-frame-2.png}


## Data frames and tibbles

* A data frame has a constraint: the length of each of its vectors must be the same.
* A data frame has `rownames()` and `colnames()`. The `names()`
  of a data frame are the column names.
* A data frame has `nrow()` rows and `ncol()` columns. The `length()` of a
  data frame gives the number of columns.

## Tibbles
\fontsize{13}{14}\sf

* Modern reimagining of the data frame.
* tibbles are "lazy and surly": they do less and complain more.

\fontsize{10}{8}\sf

```{r}
library(tibble)
df2 <- tibble(x = 1:3, y = letters[1:3])
typeof(df2)
attributes(df2)
```


## Creating data frames and tibbles

```{r}
names(data.frame(`1` = 1))

names(tibble(`1` = 1))
```

## Creating data frames and tibbles

\fontsize{10}{10}\sf

```{r, error = TRUE}
data.frame(x = 1:4, y = 1:2)
tibble(x = 1:4, y = 1:2)
```

## Creating data frames and tibbles
\fontsize{10}{10}\sf

```{r}
tibble(
  x = 1:3,
  y = x * 2,
  z = 5
)
```


## Row names {#rownames}

Data frames allow you to label each row with a name, a character vector containing only unique values:

\fontsize{10}{10}\sf

```{r}
df3 <- data.frame(
  age = c(35, 27, 18),
  hair = c("blond", "brown", "black"),
  row.names = c("Bob", "Susan", "Sam")
)
df3
```

## Row names

* tibbles do not support row names
* convert row names into a regular column with either `rownames_to_column()`, or the `rownames` argument:

\fontsize{10}{10}\sf

```{r}
as_tibble(df3, rownames = "name")
```

## Printing

\fontsize{10}{9.5}\sf

```{r}
dplyr::starwars
```

## Printing

* Tibbles only show first 10 rows and all columns that fit on
  screen. Additional columns shown at bottom.
* Each column labelled with its type, abbreviated to 3--4 letters.
* Wide columns truncated.

## List columns

\fontsize{10}{10}\sf

```{r}
df <- data.frame(x = 1:3)
df$y <- list(1:2, 1:3, 1:4)
```

```{r}
data.frame(
  x = 1:3,
  y = I(list(1:2, 1:3, 1:4))
)
```

\placefig{10}{1.5}{width=5cm,height=20cm}{../diagrams/vectors/data-frame-list.png}


```{r}
tibble(
  x = 1:3,
  y = list(1:2, 1:3, 1:4)
)
```

## Matrix and data frame columns

```{r}
dfm <- tibble(
  x = 1:3 * 10,
  y = matrix(1:9, nrow = 3),
  z = data.frame(a = 3:1, b = letters[1:3])
)
str(dfm)
```

\placefig{10}{1.25}{width=5cm,height=20cm}{../diagrams/vectors/data-frame-matrix.png}

## Quiz

16.  Can you have a data frame with zero rows? What about zero columns?
17.  What happens if you attempt to set rownames that are not unique?
18.  If `df` is a data frame, what can you say about `t(df)`, and `t(t(df))`?
    Perform some experiments, making sure to try different column types.
19.  What does `as.matrix()` do when applied to a data frame with
    columns of different types? How does it differ from `data.matrix()`?

## `NULL`

```{r, error = TRUE}
length(NULL)
```

You can test for `NULL`s with `is.null()`:

```{r}
x <- NULL
x == NULL
is.null(x)
```

# Subsetting

## Quiz

20. What is the result of subsetting a vector with positive integers,
    negative integers, a logical vector, or a character vector?
21. What's the difference between `[`, `[[`, and `$` when applied to a list?
22. When should you use `drop = FALSE`?
23. If `x` is a matrix, what does `x[] <- 0` do? How is it different from `x <- 0`?
24. How can you use a named vector to relabel categorical variables?

## Subsetting
\fontsize{13}{14}\sf

25. Fix each of the following common data frame subsetting errors:

    ```{r, eval = FALSE}
    mtcars[mtcars$cyl = 4, ]
    mtcars[-1:4, ]
    mtcars[mtcars$cyl <= 5]
    mtcars[mtcars$cyl == 4 | 6, ]
    ```

26. Why does `mtcars[1:20]` return an error? How does it differ from the
    similar `mtcars[1:20, ]`?

27. Implement your own function that extracts the diagonal entries from a
    matrix (it should behave like `diag(x)` where `x` is a matrix).

## Quiz

28. Extract the residual degrees of freedom from `mod`

    ```{r}
    #| eval: false
    mod <- lm(mpg ~ wt, data = mtcars)
    ```

29. Extract the R squared from the model summary (`summary(mod)`)

## Quiz

30. How would you randomly permute the columns of a data frame?
31. Can you simultaneously permute the rows and columns in one step?
32. How would you select a random sample of m rows from a data frame? What if the sample had to be contiguous (i.e., with an initial row, a final row, and every row in between)?
33. How could you put the columns in a data frame in alphabetical order?


# Control flow

## Quiz

34. What is the difference between `if` and `ifelse()`?

35. In the following code, what will the value of `y` be if `x` is `TRUE`?
    What if `x` is `FALSE`? What if `x` is `NA`?

    ```{r, eval = FALSE}
    y <- if (x) 3
    ```

36. What does `switch("x", x = , y = 2, z = 3)` return?

## Quiz
\fontsize{13}{14}\sf

37. What type of vector does each of the following calls to `ifelse()`
    return?

    ```{r, eval = FALSE}
    ifelse(TRUE, 1, "no")
    ifelse(FALSE, 1, "no")
    ifelse(NA, 1, "no")
    ```

38. Why does the following code work?\fontsize{10}{10}\sf

    ```{r}
    x <- 1:10
    if (length(x)) "not empty" else "empty"

    x <- numeric()
    if (length(x)) "not empty" else "empty"
    ```

## Don't allocate memory in a for loop

:::: {.columns}

::: {.column width="50%"}

```{r}
# Allocating memory within the loop
system.time(
{
  x <- NULL
  for(i in seq(1e5)) {
    x <- c(x, i)
  }
}
)
```

:::

::: {.column width="50%"}

```{r}
# Allocating memory before the loop
system.time(
{
  x <- numeric(1e5)
  for(i in seq(1e5)) {
    x[i] <- i
  }
}
)
```

:::
::::
