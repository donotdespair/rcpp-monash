---
title: Project checkpoint (10%)
---

Write an R package.

The package should have at least 3 user-facing functions, and a vignette that describes how to use the package. The package should be well-documented, with all user-facing functions having examples and unit tests.

* Calculate the score of a ten-pin bowling game where the inputs are the number of pins knocked down in each throw. Extend to allow multiple players.
* Calculate the score from a game of blackjack. Inputs are the cards held by the player and the dealer at the end of the game. Extend to multiple players, and variations of blackjack.
* Calculate the winning hand from a game of Poker. Inputs are the cards held by each player at the end of the game. Start with a simple version of poker, and extend to more complex versions. Start with 2 players and extend to multiple players. e.g., `poker_hands(c("2H", "3D", "5S", "9C", "KD"), c("3C", "3H", "3S", "AC", "AH"))` should return 2 (for player 2).
* Simulate a game of snakes and ladders between two people on a fixed board. Extend to allow multiple players, and to allow the user to specify the board layout.
* Find a word for a crossword given a set of letters. e.g., `find_word("T_GE_")` should return a list of words including "tiger", "toged" and "tyger". Extend to find the most common word, and include definitions in the output.
* Simulate a simple epidemic model. Start with two states (infected, not infected) and extend to more states (e.g., infected, recovered, not infected). Allow the user to specify the transition probability matrix and the initial state. Plot the number of people in each state over time.
* Simulate a single-server queuing system. Functions might include `simulate_queue(mean_arrival_time = 5, mean_service_time = 4, n = 1000)` which could return the number of people in the queue at each time point.  Extend to multiple servers, and different distributions for arrival and service times.
* Implement a to-do list with dates and priorities. Allow the user to add, remove, and update items. Allow the user to filter the list by date and priority. e.g., `add_todo("Buy milk", priority = 3, due = "2022-01-01")`. `show_today()` should return a list of items due today or earlier. Extensions could include a graphical interface, and functions to export and import the list.
* Generate block-bootstrapped samples from a `tsibble` object. Allow the user to specify the block length and the number of samples. e.g., `block_bootstrap(tsibble, block_length = 5, n = 1000)`. Allow block starting positions to be variable according to a specified distribution, with the user controlling where any incomplete blocks fall. Extend to handle seasonal block bootstrapping, and multiple seasonal block bootstrapping.

You may also have your own ideas for a package. If you would like to do something else, please discuss it with Mitch and Rob first.

All user-facing functions should have examples and unit tests.

Marks will be awarded for clean and efficient code, and for good design.


```{r}
#| output: asis
source(here::here("course_info.R"))
submit(schedule, "Project checkpoint")
```
