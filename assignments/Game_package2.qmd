---
title: Game package 2 (30%)
---

You need to extend your game package to include: (a) a custom vctrs class'; and (b) the use of C++. You can also consider adding some element of metaprogramming if you think it is appropriate. 

* Create and document a function for creating your vector.
* Define appropriate methods for using your vector, including `format()`, `vec_ptype2()`, and `vec_cast()`.
* Create generic function(s) for identifying/extracting useful things from your vector (examples below, e.g. suit of the card).
* Create methods for your custom generic function(s), including suitable defaults.

All user-facing functions should have examples and unit tests.

There should be at least two vignettes: one describing how to use the package (which you should have written as part of Game package 1); and one explaining the design choices you have made such as function names, arguments, user workflow, use of internal modular functions, use of non-standard evaluation if appropriate, etc.

Marks will be awarded for clean and efficient code, and for good design.

# Some suggestions

Below are some ideas for how vctrs can be used with your package. We encourage you to be creative and come up with your own ideas for how object oriented programming best suits your game package.

### Blackjack:

* Represent the cards with vctrs and provide functions/methods for things like `card_is_face()`, `card_value()`, `card_suit()`, etc.

### Poker:

* Represent the cards with vctrs and provide functions/methods for things like `card_is_face()`, `card_value()`, `card_suit()`, etc.


```{r}
#| output: asis
source(here::here("course_info.R"))
submit(schedule, "Game package 2")
```
