{
  "hash": "17248212d4c0573bb6066e49e9beb542",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Game package 2 (30%)\n---\n\nYou need to extend your game package to include: (a) a custom vctrs class' (b) some element of metaprogramming; and (c) the use of C++.\n\n* Create and document a function for creating your vector.\n* Define appropriate methods for using your vector, including `format()`, `vec_ptype2()`, and `vec_cast()`.\n* Create generic function(s) for identifying/extracting useful things from your vector (examples below, e.g. suit of the card).\n* Create methods for your custom generic function(s), including suitable defaults.\n\nAll user-facing functions should have examples and unit tests.\n\nMarks will be awarded for clean and efficient code, and for good design.\n\n# Some suggestions\n\nBelow are some ideas for how vctrs can be used with your package. We encourage you to be creative and come up with your own ideas for how object oriented programming best suits your game package.\n\n### Blackjack:\n\n* Represent the cards with vctrs and provide functions/methods for things like `card_is_face()`, `card_value()`, `card_suit()`, etc.\n\n### Poker:\n\n* Represent the cards with vctrs and provide functions/methods for things like `card_is_face()`, `card_value()`, `card_suit()`, etc.\n\n\n<br><br><hr><b>Due: 6 June 2025</b><br><a href=https://classroom.github.com/a/7yy0sjQL class = 'badge badge-large badge-blue'><font size='+2'>&nbsp;&nbsp;<b>GitHub Classroom</b>&nbsp;&nbsp;</font><br></a>\n",
    "supporting": [
      "Game_package2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}