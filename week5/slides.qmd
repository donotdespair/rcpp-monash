---
title: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming
author: "Week 5: Reproducible environments and functional programming"
format:
  beamer:
    pdf-engine: pdflatex
    aspectratio: 169
    fontsize: "14pt,t"
    section-titles: false
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: ../header.tex
    keep-tex: true
---

```{r}
#| label: setup
#| include: false
#| cache: false
source(here::here("setup.R"))
source(here::here("course_info.R"))
```

## Outline

\vspace*{0.4cm}
\tableofcontents

# Assignments

## Assignment 1

* Keep working on your package!
* Final version due on 31 May 2024

## Assignment 2

* About debugging and profiling
* Available on GitHub Classroom today!
* Due 19 April 2024

# Reproducible environments

## Reproducible environments

* To ensure that your code runs the same way on different machines and at different times, you need the computing environment to be the same.
  1. Operating system
  2. System components
  3. R version
  4. R packages

* Solutions for 1--4: Docker, Singularity, `containerit`, `rang`
* Solutions for 4: `packrat`, `checkpoint`, `renv`

## renv package

![](../diagrams/renv.png)

## renv package

* `renv.init()` : initialize a new project with a new environment. Adds:
  *  `renv/library` contains all packages used in project
  *  `renv.lock` contains metadata about packages used in project
  *  `.Rprofile` run every time R starts.

* `renv.snapshot()` : save the state of the project to `renv.lock`.

* `renv::restore()` : restore the project to the state saved in `renv.lock`.

## renv package
\fontsize{14}{16}\sf

* renv uses a package cache so you are not repeatedly installing the same packages in multiple projects.
* `renv::install()` can install from CRAN, Bioconductor, GitHub, Gitlab, Bitbucket, etc.
* `renv::update()` gets latest versions of all dependencies from wherever they were installed from.
* Only R packages are supported, not system dependencies, and not R itself.
* renv is not a replacement for Docker or Singularity.
* `renv::deactivate(clean = TRUE)` will remove the renv environment.

## Exercises

5. Add renv to your Assignment 1 project. Make sure the packages included are the latest CRAN versions of all packages.

# Progamming paradigms

## Progamming paradigms

R code is typically structured using these paradigms:

* Functional programming
* Object-oriented programming
* Literate programming
* Reactive programming

Often several paradigms used together to solve a problem.

## Programming paradigms

::: {.callout-note icon=false title="Functional programming (W5; today!)"}
* Functions are created and used like any other object.
* Output should only depend on the function's inputs.
:::

. . .

::: {.callout-note icon=false title="Object-oriented programming (W6)"}
* Functions are associated with object types.
* Methods of the same 'function' produce object-specific output.
:::

## Programming paradigms

::: {.callout-note icon=false title="Literate programming (W7)"}
* Natural language is interspersed with code.
* Aimed at prioritising documentation/comments.
* Now used to create reproducible reports/documents.
:::

. . .

::: {.callout-note icon=false title="Reactive programming (W7)"}
* Objects are expressed using code based on inputs.
* When inputs change, the object's value updates.
:::

# Functional programming

## Functional programming

R is commonly considered a 'functional' programming language - and so far we have used functional programming.

```{r}
square <- function(x) {
  return(x^2)
}
square(8)
```

The `square` function is an object like any other in R.

## Functions are objects

R functions can be printed,

```{r}
print(square)
```

. . .

inspected,

```{r}
formals(square)
```

## Functions are objects

put in a list,

\fontsize{10}{10}\sf
```{r}
my_functions <- list(square, sum, min, max)
my_functions
```

## Functions are objects

used within lists,

```{r}
my_functions[[1]](8)
```

. . .

but they can't be subsetted!

\fontsize{10}{10}\sf

```{r, error = TRUE}
square$x
```

## Handling input types

Functional programming handles different input types using control flow. The same code is ran regardless of object type.

```{r}
square <- function(x) {
  if(!is.numeric(x)) {
    stop("`x` needs to be numeric")
  }
  return(x^2)
}
```

. . .

::: {.callout-tip title="Next class..."}
We will see object-oriented programming, which handles different input types using different functions (methods)!
:::

## What are functions?

A function is comprised of three components:

* The arguments/inputs (`formals()`)
* The body/code (`body()`)
* The environment (`environment()`)

. . .

::: {.callout-caution title="Your turn!"}
Use these functions to take a closer look at `square()`.

Try modifying the function's formals/body/env with `<-`.
:::

## Functional programming

Since functions are like any other object, they can also be:

* **inputs** to functions

::: {.callout-tip title="Extensible design with function inputs"}
Using function inputs can improve your package's design!

Rather than limiting users to a few specific methods, allow them to use and write any method with functions.
:::

## Functional programming

Since functions are like any other object, they can also be:

* **inputs** to functions

* **outputs** of functions

::: {.callout-tip title="Functions making functions?"}
These functions are known as *function factories*.

Where have you seen a function that creates a function?
:::

## Function arguments

Consider a function which calculates accuracy measures:

```{r}
accuracy <- function(e, measure, ...) {
  if (measure == "mae") {
    mean(abs(e), ...)
  } else if (measure == "rmse") {
    sqrt(mean(e^2, ...))
  } else {
    stop("Unknown accuracy measure")
  }
}
```

::: {.callout-tip title="Improving the design"}
This function is limited to only computing MAE and RMSE.
:::

## Function arguments

Using function operators allows any measure to be used.

```{r, eval = FALSE}
MAE <- function(e, ...) mean(abs(e), ...)
RMSE <- function(e, ...) sqrt(mean(e^2, ...))
accuracy <- function(e, measure, ...) {
  ???
}
accuracy(rnorm(100), measure = RMSE)
```

::: {.callout-caution title="Your turn!"}
Complete the accuracy function to calculate accuracy statistics based on the function passed in to `measure`.
:::

## Function factories

Let's generalise `square()` to raise numbers to any power.

\fontsize{10}{10}\sf

```{r}
power <- function(x, exp) {
  x^exp
}
power(8, exp = 2)
power(8, exp = 3)
```

::: {.callout-tip title="Starting a factory"}
What if the function returned a function instead?
:::

## Function factories

\fontsize{10}{10}\sf

```{r}
power_factory <- function(exp) {
  # R is lazy and won't look at exp unless we ask it to
  force(exp)
  # Return a function, which finds exp from this environment
  function(x) {
    x^exp
  }
}
square <- power_factory(exp = 2)
square(8)
```

. . .

```{r}
cube <- power_factory(exp = 3)
cube(8)
```

## Function factories

Consider this function to calculate plot breakpoints of vectors.

```{r}
breakpoints <- function(x, n.breaks) {
  seq(min(x), max(x), length.out = n.breaks)
}
```

::: {.callout-caution title="Your turn!"}
Convert this function into a function factory.

Is it better to create functions via `x` or `n.breaks`?
:::


<!-- 1. purrr/furrr -->
<!-- 2. functional arguments -->
<!-- 3. functional outputs -->
