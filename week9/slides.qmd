---
title: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming
author: "Week 8: Quarto and targets -- efficient reproducible workflows"
format:
  beamer:
    pdf-engine: pdflatex
    aspectratio: 169
    fontsize: "14pt,t"
    section-titles: false
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: ../header.tex
    colorlinks: true
    urlcolor: MonashBlue
    linkcolor: burntorange
---

```{r}
#| label: setup
#| include: false
#| cache: false
source(here::here("setup.R"))
source(here::here("course_info.R"))
```

## Outline

\vspace*{0.4cm}
\tableofcontents

# Assignments

## Assignments

* Assignment 2 feedback
* Assignment 3 due 10 May
* Assignment 4 due 24 May


# Quarto

## Quarto
\fontsize{14}{16}\sf

* Generalization of Rmarkdown (not dependent on R)
* Supports R, Python, Javascript and Julia chunks by using either `knitr`, `jupyter` or `ObservableJS` engines.
* More consistent yaml header and chunk options.
* Many more output formats, and many more options for customizing format.
* Heavier reliance on pandoc Lua filters
* Uses pandoc templates for extensions

\centerline{\includegraphics[width = 10cm]{images/qmd.png}}

## Choose your engine

Specify the engine in the yaml header:

````{verbatim}
---
engine: knitr
---
````

````{verbatim}
---
engine: jupyter
jupyter: python3
---
````


**Default:** If any `{r}` blocks found, use `knitr` engine; otherwise use `jupyter` (with kernel determined by first block).


## Execute options

*   `execute` option in yaml header can be used instead of a `setup` chunk:

    ````{verbatim}
    execute:
      cache: true
      echo: false
      warning: false
    ````

* `setup` chunk still allowed.

## Chunk options

Rmarkdown syntax recognized for R chunks.

More consistent chunk options use the hash-pipe `#|`

````{verbatim}
```{r}
#| label: fig-chunklabel
#| fig-caption: My figure
#| fig-width: 6
#| fig-height: 4
mtcars |>
  ggplot(aes(x = mpg, y = wt)) +
  geom_point()
```
````

Reference the figure using `@fig-chunklabel`.

## Chunk options

* Quarto consistently uses hyphenated options (`fig-width` rather than `fig.width`)
* The Rmarkdown `knitr` options are recognized for backwards compatibility.
* Options that are R expressions need to be prefaced by `!expr`

  ````{verbatim}
  ```{r}
  #| fig-cap: !expr paste("My figure", 1+1)
  ```
  ````

## Extensions and templates
\fontsize{13}{17}\sf

* Quarto extensions modify and extend functionality.
* They are stored locally, in the `_extensions` folder alongside the qmd document.
* See <https://quarto.org/docs/extensions/> for a list.
* Templates are extensions used to define new output formats.
* Journal templates at\newline <https://quarto.org/docs/extensions/listing-journals.html>
* Monash templates at\newline <https://robjhyndman.com/hyndsight/quarto_templates.html>

## quarto on the command line
\fontsize{14}{14.5}\sf\vspace*{-0.4cm}

* `quarto render` to render a quarto or Rmarkdown document.
* `quarto preview` to preview a quarto or Rmarkdown document.
* `quarto add <gh-org>/<gh-repo>` to add an extension from a github repository.
* `quarto update <gh-org>/<gh-repo>` to update an extension
* `quarto remove <gh-org>/<gh-repo>` to remove an extension
* `quarto list extensions installed`
* `quarto use template <gh-org>/<gh-repo>` to use existing repo as starter template.

## Add a custom format

From the CLI:\qquad  `quarto add numbats/monash-quarto-memo`\pause

New folder/files added

```{verbatim}
├── _extensions
│   └── numbats
│       └── memo
│           └── ...
```

\pause

Update YAML

```{verbatim}
---
title: "My new file using the `memo-pdf` format"
format: memo-pdf
---
```

## Exercise

* Set up a new project.
* Create a quarto document using an html format.
* Add a code chunk to generate a figure with a caption.
* Reference the figure in the text using `@fig-chunklabel`.
* Add the monash memo extension and generate a pdf output.

# targets

## targets: reproducible computation at scale

\placefig{0.5}{1.8}{width=5cm}{images/logo.png}

\begin{textblock}{15}(0.5,8.5)
\textcolor{gray}{\footnotesize Some images from https://wlandau.github.io/targets-tutorial}
\end{textblock}

\begin{textblock}{10}(6, 2)
\begin{itemize}
\item Supports a clean, modular, function-oriented programming style.
\item Learns how your pipeline fits together.
\item Runs only the necessary computation.
\item Abstracts files as R objects.
\item Similar to Makefiles, but with R functions.
\end{itemize}
\end{textblock}

## Interconnected tasks

\only<1>{\placefig{0.5}{2}{width=13cm}{images/workflow.png}}
\only<2>{\placefig{0.5}{2}{width=13cm}{images/change.png}}
\only<3>{\placefig{0.5}{2}{width=13cm}{images/downstream.png}}

## Dilemma: short runtimes or reproducible results?

\fullheight{images/decisions.png}

## Let a pipeline tool do the work

\fullwidth{images/pipeline_graph.png}\vspace*{-0.15cm}

* Save time while ensuring computational reproducibility.
* Automatically skip tasks that are already up to date.

## Typical project structure

```{verbatim}
_targets.R # Required top-level configuration file.
R/
└── functions.R
data/
└── my_data.csv
```

### _targets.R
\vspace*{-0.26cm}

```{r}
#| eval: false
library(targets)
tar_source() # source all files in R folder
tar_option_set(packages = c("tidyverse", "fable"))
list(
  tar_target(my_file, "data/my_data.csv", format = "file"),
  tar_target(my_data, read_csv(my_file)),
  tar_target(my_model, model_function(my_data))
)
```

## Generate `_targets.R` in working directory

```{r}
#| eval: false
library(targets)
tar_script()
```


## Useful targets commands

* `tar_make()` to run the pipeline.
* `tar_make(starts_with("fig"))` to run only targets starting with "fig".
* `tar_read(object)` to read a target.
* `tar_load(object)` to load a target.
* `tar_load_everything()` to load all targets.
* `tar_manifest()` to list all targets
* `tar_visnetwork()` to visualize the pipeline.
* `tar_destroy()` to remove all targets.
* `tar_outdated()` to list outdated targets.

## Debugging

Errored targets to return `NULL` so pipeline continues.

```{r}
#| eval: false
tar_option_set(error = "null")
```

\pause

See error messages for all targets.

```{r}
#| eval: false
tar_meta(fields = error, complete_only = TRUE)
```

\pause

See warning messages for all targets.

```{r}
#| eval: false
tar_meta(fields = warnings, complete_only = TRUE)
```

## Debugging
\fontsize{14}{15.5}\sf

* Try loading all available targets: `tar_load_everything()`. Then run the command of the errored target in the console.

* Pause the pipeline with `browser()`

* Use the debug option: `tar_option_set(debug = "target_name")`

* Save the workspaces:

  - `tar_option_set(workspace_on_error = TRUE)`
  - `tar_workspaces()`
  - `tar_workspace(target_name)`


## Random numbers

* Each target runs with its own seed based on its name and the global seed from `tar_option_set(seed = ???)`
* So running only some targets, or running them in a different order, will not change the results.

## Folder structure

```{verbatim}
├── .git/
├── .Rprofile
├── .Renviron
├── renv/
├── index.Rmd
├── _targets/
├── _targets.R
├── _targets.yaml
├── R/
├──── functions_data.R
├──── functions_analysis.R
├──── functions_visualization.R
├── data/
└──── input_data.csv
```

## targets with quarto

```{r}
#| eval: false
library(targets)
library(tarchetypes)                                                 # <1>
tar_source() # source all files in R folder
tar_option_set(packages = c("tidyverse", "fable"))
list(
  tar_target(my_file, "data/my_data.csv", format = "file"),
  tar_target(my_data, read_csv(my_file)),
  tar_target(my_model, model_function(my_data))
  tar_quarto(report, "file.qmd", extra_files = "references.bib")     # <2>
  )
```

1. Load `tarchetypes` package for quarto support.
2. Add a quarto target.

## Exercise

* Add a targets workflow to your quarto document.
* Create a visualization of the pipeline network using `tar_visnetwork()`.

## Assignment 4
