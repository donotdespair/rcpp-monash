---
title: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming
author: "Week 7: Programming paradigms"
format:
  beamer:
    pdf-engine: pdflatex
    aspectratio: 169
    fontsize: "14pt,t"
    section-titles: false
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: ../header.tex
    keep-tex: false
---

```{r}
#| label: setup
#| include: false
#| cache: false
source(here::here("setup.R"))
source(here::here("course_info.R"))
```

## Outline

\vspace*{0.4cm}
\tableofcontents

# Assignments

## Assignment 2

* Questions?
* Due 19 April 2024

# Programming paradigms

## Programming paradigms

::: {.callout-note icon=false title="Functional programming (W5)"}
* Functions are created and used like any other object.
* Output should only depend on the function's inputs.
:::

. . .

::: {.callout-note icon=false title="Object-oriented programming (W6-W7)"}
* Functions are associated with object types.
* Methods of the same 'function' produce object-specific output.
:::

## Programming paradigms

::: {.callout-note icon=false title="Literate programming (W7)"}
* Natural language is interspersed with code.
* Aimed at prioritising documentation/comments.
* Now used to create reproducible reports/documents.
:::

. . .

::: {.callout-note icon=false title="Reactive programming (W8)"}
* Objects are expressed using code based on inputs.
* When inputs change, the object's value updates.
:::


# Object oriented programming

## Object oriented programming

::: {.callout-note icon=false title="S3"}
* The OO system used by most of CRAN.
* Very simple (and 'limited') compared to other systems.
:::

. . .

::: {.callout-note icon=false title="vctrs"}
* Builds upon S3 to make creating vectors easier.
* Good practices inherited by default.
:::


## S3 Recap: Objects and methods

Unlike most OO systems where methods belong to **objects/data**, S3 methods *belong* to 'generic' **functions**.

Recall that functions in R are objects like any other.

. . .


::: {.callout-tip title="Self awareness"}
In S3, there is no concept of 'self' since the relevant objects are available as function arguments.

However S3 is self-aware of registered methods, allowing `NextMethod()` to call the S3 method of the inherited class.
:::

## S3 Recap: S3 dispatch

To use S3, we call the generic function (e.g. `plot()`).

```{r}
plot
```

## S3 Recap: S3 dispatch

This function looks at the inputs and dispatches (uses) the appropriate method for the input variable class/type.

\fontsize{10}{10}\sf
```{r}
stats:::plot.density
```

## S3 Recap: S3 dispatch

If there isn't a registered method for the object, the default method for the generic will be used.

\fontsize{10}{10}\sf
```{r}
graphics:::plot.default
```

## Creating an S3 generic

S3 generics are work like any ordinary function, but they include `UseMethod()` which calls the appropriate method.

::: {.callout-caution title="Your turn!"}
Create an S3 generic called "reverse".

This function will reverse objects. For example,

* `reverse("stressed")` becomes `"desserts"`,
* `reverse(7919)` becomes `9197`,
* `reverse(1.9599)` becomes `9959.1`.
:::

## Writing S3 methods

An S3 method is an ordinary function with some constraints:

* The function's name is of the form `<generic>.<class>`,
* The function's arguments match the generic's arguments,
* The function is registered as an S3 method (for packages).

This looks like:

```r
#' Documentation for the method
#' @method <generic> <class>
<generic>.<class> <- function(<generic args>, <method args>, ...) {
  # The code for the method
}
```

## Writing S3 methods

::: {.callout-caution title="Your turn!"}
Write methods for reversing `character`, `integer`, and `double` objects.

* `reverse("stressed")` becomes `"desserts"`,
* `reverse(7919L)` becomes `9197L`,
* `reverse(1.9599)` becomes `9959.1`.

*Hint: `stringi::stri_reverse()` will reverse a string.*

*The `integer` and `double` methods should return an integer and double respectively.*
:::

## Writing S3 defaults

What if we tried to reverse the current date; `reverse(Sys.Date())`?

. . .

::: {.callout-caution title="Your turn!"}

Question: what should the default behaviour be?

:::

. . .

* Raise an error?
* Return a reversed string?
* Something else entirely?

## Creating your own S3 objects

S3 methods are *(mostly)* dispatched based on the `class()`.

```{r}
class("stressed")
class(7919L)
class(1.9599)
```

## Creating your own S3 objects

To create an S3 object, we add a class to an object.

This is usually done with `structure()`, for example:

\fontsize{10}{10}\sf
```{r}
e <- structure(list(numerator = 2721, denominator = 1001), class = "fraction")
e
```

## Creating your own S3 objects

The `structure()` function is usually only used within other functions made for end-users. For example, 

* `lm()` returns a list with class `"lm"`, and
* `tibble()` returns a data.frame (list) with classes `"tbl_df"`, `"tbl"`, and `"data.frame"`.

. . .

::: {.callout-caution title="Your turn!"}

Create `fraction()`, which returns `fraction` objects.

This function should check that the inputs are suitable
:::

## Creating your own S3 objects

The `fraction` class doesn't yet have any methods, so it inherits methods from its list type.

Usually we would create a method for printing S3 objects.

```{r}
print.fraction <- function(x, ...) {
  paste(x$numerator, x$denominator, sep = "/")
}
e
```

## Creating your own S3 objects

::: {.callout-caution title="Your turn!"}
Create a `reverse()` method for the `fraction` object class, which inverts the numerator and denominator.

\vspace{1em}

*Finished early?*

Write a method for converting a `fraction` into a number.
:::

```{r, include = FALSE}
as.double.fraction <- function(x, ...) {
  x$numerator / x$denominator
}
```


## Creating your own S3 vectors (with vctrs)

The *vctrs* package is helpful for creating custom vectors.

It is built upon S3, so the same approach for creating S3 generics and S3 methods also applies to vctrs.

::: {.callout-tip title="S3 or vctrs?"}
* Regular S3 is useful for creating singular objects
* vctrs is useful for creating vectorised objects
:::


## Creating your own S3 vectors (with vctrs)

::: {.callout-tip title="Why vctrs?"}
*vctrs* simplifies the complicated parts in creating vectors

* easy subsetting
* nice printing
* predictable recycling
* casting / coercion
* tidyverse compatibility
:::

## Examples of vctrs packages

Lots of vctrs including:

* IP addresses
* Spatial geometries
* Time
* uncertainty

<https://github.com/krlmlr/awesome-vctrs>

## Some packages I've made that use vctrs

* [distributional](https://github.com/mitchelloharawild/distributional/)

  Distributions of various shapes in vectors
* [mixtime](https://github.com/mitchelloharawild/mixtime)

  Time points/intervals of various granularities in vectors
* [graphvec](https://github.com/mitchelloharawild/graphvec/)
  
  Graph factors, storing graph edges between levels.
* [fabletools](https://github.com/tidyverts/fabletools/)
  
  Custom data frames 'mable', 'fable', and 'dable'.
  
## Creating a new vctr

The basic way to produce a vctr is with `vctrs::new_vctr()`.

Just like `structure()`, you provide an object and its new class.

```{r}
attendance <- vctrs::new_vctr(c(0.8, 0.7, 0.75, 0.5), class = "percent")
attendance
```

## Creating a new vctr

As with S3, functions provide ways for users to create vectors.

```{r}
percent <- function(x) {
  vctrs::new_vctr(x, class = "percent")
}
attendance <- percent(c(0.8, 0.7, 0.75, 0.5))
attendance
```

## Creating a new vctr

Don't forget to check the inputs, vctrs provides helpful functions to make this easier and provide informative errors.

```{r}
#| error: true
percent <- function(x) {
  vctrs::vec_assert(x, numeric())
  vctrs::new_vctr(x, class = "percent")
}
percent("80%")
```

## Creating a new vctr

It's useful to provide default arguments in this function which creates a length 0 vector (similar to how empty vectors are created with `numeric()` and `character()`).

```{r}
#| error: true
percent <- function(x = numeric()) {
  vctrs::vec_assert(x, numeric())
  vctrs::new_vctr(x, class = "percent")
}
percent()
```

## Creating a new vctr

While vctrs provides a nice `print` method, we need to specify how our vector should be formatted.

```{r}
format.percent <- function(x, ...) {
  paste0(vctrs::vec_data(x)*100, "%")
}
attendance
```


## The rcrd type

A special type of vctr is a record (rcrd).

A record is a list containing equal length vectors, and its size is the length its vectors rather than its list.

::: {.callout-tip title="Record indexing"}
Usually in R, indexing happens across the list. With the record type, indexing happens within the list's vectors.
:::

## The rcrd type

::: {.callout-tip title="Length of a data frame"}
Usually the length of data refers to the number of rows, but in R it is the number of columns since it is a list.

```{r}
length(mtcars)
```

In vctrs, data is a record so we get the number of rows.

```{r}
vctrs::vec_size(mtcars)
```

:::

## Creating a new rcrd

A record is created with the `vctrs::new_rcrd()` function.

```{r}
wallet <- vctrs::new_rcrd(
  list(amt = c(10, 38), unit = c("AU$", "Â¥")), class = "currency"
)
format.currency <- function(x, ...) {
  paste0(vctrs::field(x, "unit"), vctrs::field(x, "amt"))
}
wallet
```

## Creating a new rcrd

::: {.callout-caution title="Your turn!"}
Rewrite the `fraction()` function to use the rcrd data type.

\vspace{1em}

You will also need to update the methods:

* Obtain the numerator and denominator with `field()`.
* Replace the `print` method with a `format` method.
* Remove the `print.fraction` method with `rm()`.
:::

## The list_of type

`list_of()` vectors require list elements to be the same type.

It can be created with `list_of()`, or more easily converted to with `as_list_of()`. It behaves identically to `new_vctr()`.

\fontsize{10}{10}\sf
```{r}
percent <- vctrs::as_list_of(list(0.8, 0.7, 0.75, 0.5), .ptype = numeric())
percent
```

## Prototypes

Notice the `.ptype` when we used `as_list_of()`?

`ptype` is shorthand for prototype, which is a size-0 vector.

::: {.callout-tip title="Prototype attributes!"}
Prototypes contains all relevant attributes of the object, such as class, dimension, and levels of factors.
:::


## Prototypes

Obtain prototypes of a vector with `vctrs::vec_ptype()`.

\fontsize{10}{10}\sf
```{r}
vctrs::vec_ptype(1:10)
vctrs::vec_ptype(rnorm(10))
vctrs::vec_ptype(factor(letters))
vctrs::vec_ptype(attendance)
```

## vctr, rcrd, or list_of?

::: {.callout-caution title="Your turn!"}
What's better? The `vctr` type or `list_of`?
:::

. . .

It depends! If your vector is based on...

* a single atomic vector (like `percent`) then `vctr`,
* two or more atomic vectors (like `fraction`), then `rcrd`,
* complicated objects (like `lm`), then `list_of`.

## That's it! You have created a new R vector!

::: {.callout-info title="Time for a break"}
After the break we will look at writing methods which make these vectors more usable.
:::

## Methods

## format()

## pillar

## vec_math, vec_arith

## Double dispatch

## Typing

## Casting and coercion

## Recycling


# Literate programming

## Literate programming

 * Due to Donald Knuth (Stanford), 1984
 * A script or document that contains an explanation of the program logic in a natural language (e.g. English), interspersed with snippets of source code, which can be compiled and rerun.
 * Generates two representations\newline from a source file: formatted\newline documentation and "tangled" code.

\placefig{10.5}{4.6}{width = 6cm}{WEB.png}

## Literate programming

* As a programming approach, it never quite caught on.
* But it has become the standard approach for reproducible documents.

## Literate programming examples

* WEB (combining Pascal and TeX)
* roxygen2 comments
  * technically documentation generation rather than literate programming
  * documentation embedded in code, rather than code embedded in documentation
* Sweave documents
* Jupyter notebooks
* Rmarkdown documents
* Quarto documents

## roxygen2

* roxygen2 documentation are just comments to R.
* roxygen2::roxygenize():
  * generates documentation from these comments in the form of Rd files
  * adds relevant lines to the NAMESPACE file.
* roxygen2::roxygenize() is called by devtools::document().
* Advantage: keeps documentation with the code. More readable, less chance for errors.

## Markdown syntax
\fontsize{14}{16}\sf
Markdown: a "markup" language for formatting text.

* Headings:

    `# Heading 1`\newline
    `## Heading 2`

* **Bold**: `**bold**`.
* *Italic*: `*italic*`.
* Blockquotes:

    `> blockquote`.

## Markdown and Rmarkdown

* Markdown (markup language):
  * Extension either `.md` or `.markdown`.
  * Used in many places on the web, in note-taking apps, etc.

* Rmarkdown (markup language):
  * an extension of markdown that allows for embedded R code chunks.
  * Extension `.Rmd`.

* Rmarkdown (package):
  * an R package that allows for the conversion of `.Rmd` files to other formats.

## Rmarkdown files

* Structure:
  1. YAML header
  2. Markdown content
  3. R code chunks surrounded by `` ```{r} `` and `` ``` ``

* Rmarkdown documents can be compiled to HTML, PDF, Word, and other formats
* Compile with `rmarkdown::render("file.Rmd")`

## Rmarkdown, knitr and pandoc

* `rmarkdown::render()`
  * Uses `knitr` to run all code chunks, and "knit" the results into a markdown file (replacing R chunks with output).
  * Uses `pandoc` to convert the markdown file to the desired output format.
  * If PDF output is desired, LaTeX then converts the tex file (from pandoc output) to pdf.

\centerline{\includegraphics[width = 10cm]{rmd.png}}

## Some chunk options
\fontsize{14}{16}\sf

* `eval`: whether to evaluate the code chunk
* `echo`: whether to display the code chunk
* `include`: whether to include the code chunk in the output
* `results = 'hide'` hides printed output.
* `fig.show = 'hide'` hides figures.
* `message`: whether to display messages
* `warning`: whether to display warnings
* `error = TRUE`: continue even if code returns an error.
* `fig.cap`: caption for the figure
* `fig.width`, `fig.height`: width and height of the figure
* `cache`: whether to cache the code chunk

## Global chunk options

````{verbatim}
```{r setup, include=FALSE}
knitr::opts_chunk$set(
  comment = "#>",
  collapse = TRUE,
  echo = FALSE,
  message = FALSE,
  warning = FALSE
)
```
````

* The chunk named `setup` will be run before any other chunks.

## Debugging

* The Rmarkdown document is compiled in a different environment from your R console.
* If you get an error, try running all chunks (Ctrl+Alt+R).
* If you can't reproduce the error, check the working directory (add `getwd()` in a chunk).
* Try setting `error = TRUE` on problem chunk to help you diagnose what happens. (But change it back!)
* Look at the intermediate files (`.md` or `.tex`) to see what is happening.

## Quarto
\fontsize{14}{16}\sf

* Generalization of Rmarkdown (not dependent on R)
* Supports R, Python, Javascript and Julia chunks by using either `knitr`, `jupyter` or `ObservableJS` engines.
* More consistent yaml header and chunk options.
* Many more output formats, and many more options for customizing format.
* Relies on pandoc for converting `md` to other formats.
* Uses pandoc templates (with Lua) for extensions

\centerline{\includegraphics[width = 10cm]{qmd.png}}
