---
title: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming
author: "Week 8: Literate and reactive programming"
format:
  beamer:
    pdf-engine: pdflatex
    aspectratio: 169
    fontsize: "14pt,t"
    section-titles: false
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: ../header.tex
    colorlinks: true
    urlcolor: MonashBlue
    linkcolor: burntorange
---

```{r}
#| label: setup
#| include: false
#| cache: false
source(here::here("setup.R"))
source(here::here("course_info.R"))
```

## Outline

\vspace*{0.4cm}
\tableofcontents

# Assignments

## Assignments 3 and 4

* Assignment 3 due 10 May
* Assignment 4 due 24 May

# Literate programming

## Literate programming

 * Due to Donald Knuth (Stanford), 1984
 * A script or document that contains an explanation of the program logic in a natural language (e.g. English), interspersed with snippets of source code, which can be compiled and rerun.
 * Generates two representations\newline from a source file: formatted\newline documentation and "tangled" code.

\placefig{10.5}{4.6}{width = 6cm}{WEB.png}

## Literate programming

* As a programming approach, it never quite caught on.
* But it has become the standard approach for reproducible documents.

## Literate programming examples

* WEB (combining Pascal and TeX)
* roxygen2 comments
  * technically documentation generation rather than literate programming
  * documentation embedded in code, rather than code embedded in documentation
* Sweave documents
* Jupyter notebooks
* Rmarkdown documents
* Quarto documents

# roxygen2
## roxygen2

* roxygen2 documentation are just comments to R.
* roxygen2::roxygenize():
  * generates documentation from these comments in the form of Rd files
  * adds relevant lines to the NAMESPACE file.
* roxygen2::roxygenize() is called by devtools::document().
* Advantage: keeps documentation with the code. More readable, less chance for errors.

# Rmarkdown

## Markdown syntax
\fontsize{14}{16}\sf
Markdown: a "markup" language for formatting text.

* Headings:

    `# Heading 1`\newline
    `## Heading 2`

* **Bold**: `**bold**`.
* *Italic*: `*italic*`.
* Blockquotes:

    `> blockquote`.

## Markdown and Rmarkdown

* Markdown (markup language):
  * Extension either `.md` or `.markdown`.
  * Used in many places on the web, in note-taking apps, etc.

* Rmarkdown (markup language):
  * an extension of markdown that allows for embedded R code chunks.
  * Extension `.Rmd`.

* Rmarkdown (package):
  * an R package that allows for the conversion of `.Rmd` files to other formats.

## Rmarkdown files

* Structure:
  1. YAML header
  2. Markdown content
  3. R code chunks surrounded by `` ```{r} `` and `` ``` ``
  4. Inline R surrounded by `` `r `` and `` ` ``

* Rmarkdown documents can be compiled to HTML, PDF, Word, and other formats
* Compile with `rmarkdown::render("file.Rmd")`

## Rmarkdown, knitr and pandoc

* `rmarkdown::render()`
  * Uses `knitr` to run all code chunks, and "knit" the results into a markdown file (replacing R chunks with output).
  * Uses `pandoc` to convert the markdown file to the desired output format.
  * If PDF output is desired, LaTeX then converts the tex file (from pandoc output) to pdf.

\centerline{\includegraphics[width = 10cm]{rmd.png}}

## knitr functions

* `knitr::knit()`: knits a single Rmd file --- runs all code chunks and replaces them with output in a markdown file.
* `knitr::purl()`: extracts all R code from an Rmd file and saves it to a new file.
* `knitr::spin()`: knits a specially formatted R script file into an Rmd file.

## Rmarkdown packages

  * rmarkdown (to html, pdf, docx, odt, rtf, md, etc.)
  * bookdown (to html, pdf, epub)
  * blogdown (to html) -- uses hugo rather than pandoc
  * xaringan (to html) -- uses remark.js rather than pandoc
  * beamer (to pdf)
  * rticles (to pdf)
  * tufte (to html, pdf)
  * vitae (to pdf)
  * distill (to html)
  * flexdashboard (to html)

## Some chunk options
\fontsize{14}{16}\sf

* `eval`: whether to evaluate the code chunk
* `echo`: whether to display the code chunk
* `include`: whether to include the code chunk in the output
* `results = 'hide'` hides printed output.
* `results = 'asis'` includes the output as is.
* `message`: whether to display messages
* `warning`: whether to display warnings
* `error = TRUE`: continue even if code returns an error.
* `fig.cap`: caption for the figure
* `fig.width`, `fig.height`: width and height of the figure
* `cache`: whether to cache the code chunk

## Global chunk options

````{verbatim}
```{r setup, include=FALSE}
knitr::opts_chunk$set(
  comment = "#>",
  collapse = TRUE,
  echo = FALSE,
  message = FALSE,
  warning = FALSE
)
```
````

* The chunk named `setup` will be run before any other chunks.

## Debugging

* The Rmarkdown document is compiled in a different environment from your R console.
* If you get an error, try running all chunks (Ctrl+Alt+R).
* If you can't reproduce the error, check the working directory (add `getwd()` in a chunk).
* Try setting `error = TRUE` on problem chunk to help you diagnose what happens. (But change it back!)
* Look at the intermediate files (`.md` or `.tex`) to see what is happening.

## Caching


````{verbatim}
```{r setup, include=FALSE}
knitr::opts_chunk$set(cache = TRUE)
```
````

or by chunk:

````{verbatim}
```{r, cache = TRUE}
```
````


## Caching

* When evaluating code chunks, knitr will save the results of chunks with caching to files to be reloaded in subsequent runs.
* Caching is useful when a chunk takes a long time to run.
* It will re-run if the code in the chunk changes in any way (even comments or spacing).
* Beware of inherited objects from earlier chunks. A chunk will not re-run if inherited objects change without explicit dependencies.
* Beware of dependence on external files.

## Caching

````{verbatim}
```{r chunk1, cache = TRUE}
x <- 1
```

```{r chunk2, cache = TRUE, dependson = "chunk1"}
y <- x*3
```
````

\pause

````{verbatim}
```{r chunk1, cache = TRUE}
x <- 1
```

```{r chunk2, cache = TRUE, cache.extra = x}
y <- x*3
```
````


## Caching

Cache will be rebuilt if:

* Chunk options change except `include`
* Any change in the code, even a space or comment
* An explicit dependency changes

Do not cache if:

 * setting R options like `options('width')`
 * setting knitr options like `opts_chunk$set()`
 * loading packages via `library()` if those packages are used by uncached chunks

## Caching with random numbers

````{verbatim}
```{r setup, include=FALSE}
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
```
````

* `rand_seed` is an unevaluated expression.
* Each chunk will check if `.Random.seed` has been changed since the last run.
* If it has, the chunk will be re-run.

## Some caching options
\fontsize{14}{15}\sf

* `cache.comments` If `FALSE`, changing comments does not invalidate the cache.
* `cache.rebuild` If `TRUE`, the cache will be rebuilt even if the code has not changed. e.g.,\newline `cache.rebuild = !file.exists("some-file")`
* `dependson` A character vector of labels of chunks that this chunk depends on.
* `my_new_option` A new option that you can use in your code to invalidate the cache. e.g., `my_new_option = c(x,y)`
* `autodep` If `TRUE`, the dependencies are automatically determined. (May not be reliable.)

## Caching

Build automatic dependencies among chunks

````{verbatim}
```{r setup, include=FALSE}
knitr::opts_chunk$set(cache=TRUE, autodep = TRUE)
```
````

Make later chunks depend on previous chunks

````{verbatim}
```{r setup, include=FALSE}
dep_prev() # Don't use with `autodep = TRUE`
```
````

## Child documents

````{verbatim}
```{r, child=c('one.Rmd', 'two.Rmd')}
```
````

\pause\alert{Conditional inclusion}

````{verbatim}
```{r, child = if(condition) 'file1.Rmd' else 'file2.Rmd'}
```
````

\pause\alert{R Script files}


````{verbatim}
```{r, file = c("Rscript1.R", "Rscript2.R")}
```
````

* Better than `source("Rscript1.R")` because output of script included and dependencies tracked.

## Other language engines

````{verbatim}
```{python}
print("Hello Python!")
```
````

````{verbatim}
```{stata}
sysuse auto
summarize
```
````

* Python and Stata need to be installed with executables on `PATH`


## Other language engines
\fontsize{12}{12}\sf

```{r}
#| echo: true
names(knitr::knit_engines$get())
```

# Quarto

## Quarto
\fontsize{14}{16}\sf

* Generalization of Rmarkdown (not dependent on R)
* Supports R, Python, Javascript and Julia chunks by using either `knitr`, `jupyter` or `ObservableJS` engines.
* More consistent yaml header and chunk options.
* Many more output formats, and many more options for customizing format.
* Heavier reliance on pandoc Lua filters
* Uses pandoc templates for extensions

\centerline{\includegraphics[width = 10cm]{qmd.png}}

## Choose your engine

Specify the engine in the yaml header:

````{verbatim}
---
engine: knitr
---
````

````{verbatim}
---
engine: jupyter
jupyter: python3
---
````


**Default:** If any `{r}` blocks found, use `knitr` engine; otherwise use `jupyter` (with kernel determined by first block).


## Execute options

*   `execute` option in yaml header can be used instead of a `setup` chunk:

    ````{verbatim}
    execute:
      cache: true
      echo: false
      warning: false
    ````

* `setup` chunk still allowed.

## Chunk options

Rmarkdown syntax recognized for R chunks.

More consistent chunk options use the hash-pipe `#|`

````{verbatim}
```{r}
#| label: fig-chunklabel
#| fig-caption: My figure
#| fig-width: 6
#| fig-height: 4
mtcars |>
  ggplot(aes(x = mpg, y = wt)) +
  geom_point()
```
````

## Chunk options

* Quarto consistently uses hyphenated options (`fig-width` rather than `fig.width`)
* The Rmarkdown `knitr` options are recognized for backwards compatibility.
* Options that are R expressions need to be prefaced by `!expr`

  ````{verbatim}
  ```{r}
  #| fig-cap: !expr paste("My figure", 1+1)
  ```
  ````

## Extensions and templates
\fontsize{13}{17}\sf

* Quarto extensions modify and extend functionality.
* See <https://quarto.org/docs/extensions/> for a list.
* Templates are extensions used to define new output formats.
* Journal templates at\newline <https://quarto.org/docs/extensions/listing-journals.html>
* Monash templates at\newline <https://robjhyndman.com/hyndsight/quarto_templates.html>

## Exercise

* Create a quarto document using an html format
* Add a code chunk to generate a figure with a figure caption.
* Reference the figure in the text using `@fig-chunklabel`.
* Add the monash memo extension and generate a pdf output.
