---
title: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming
author: "Week 2: Foundations of R programming"
format:
  beamer:
    pdf-engine: pdflatex
    aspectratio: 169
    fontsize: "14pt,t"
    section-titles: false
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: ../header.tex
    keep-tex: false
---

```{r}
#| label: setup
#| include: false
#| cache: false
source(here::here("setup.R"))
source(here::here("course_info.R"))
```

## Outline

\vspace*{0.4cm}
\tableofcontents

# Control flow

## Quiz

1.  What is the difference between `if` and `ifelse()`?

2.  In the following code, what will the value of `y` be if `x` is `TRUE`? What if `x` is `FALSE`? What if `x` is `NA`?

    ```{r, eval = FALSE}
    y <- if (x) 3
    ```

3.  What does `switch("x", x = , y = 2, z = 3)` return?

## Quiz
\fontsize{13}{14}\sf

4.  What type of vector does each of the following calls to `ifelse()`
    return?

    ```{r, eval = FALSE}
    ifelse(TRUE, 1, "no")
    ifelse(FALSE, 1, "no")
    ifelse(NA, 1, "no")
    ```

5.  Why does the following code work?\fontsize{10}{10}\sf

    ```{r}
    x <- 1:10
    if (length(x)) "not empty" else "empty"

    x <- numeric()
    if (length(x)) "not empty" else "empty"
    ```

## Don't allocate memory in a for loop

:::: {.columns}

::: {.column width="50%"}

```{r}
# Allocating memory within the loop
system.time(
{
  x <- NULL
  for(i in seq(1e5)) {
    x <- c(x, i)
  }
}
)
```

:::

::: {.column width="50%"}

```{r}
# Allocating memory before the loop
system.time(
{
  x <- numeric(1e5)
  for(i in seq(1e5)) {
    x[i] <- i
  }
}
)
```

:::
::::

# Functions

## Function fundamentals

* Almost all functions can be broken down into three components: arguments, body, and environment.

  * The `formals()`, the list of arguments that control how you call the function.
  * The `body()`, the code inside the function.
  * The `environment()`, the data structure that determines how the function finds the values associated with the names.

* Functions are objects and have attributes.

## Function components
\fontsize{10}{5}\sf

```{r}
f02 <- function(x, y) {
  # A comment
  x + y
}
formals(f02)
body(f02)
environment(f02)
```

## Function attributes

```{r}
attr(f02, "srcref")
```

## Invoking a function
\fontsize{10}{10}\sf

```{r}
mean(1:10, na.rm = TRUE)
mean(, TRUE, x = 1:10)
args <- list(1:10, na.rm = TRUE)
do.call(mean, args)
```

## Quiz

6.  Given a name, like `"mean"`, `match.fun()` lets you find a function.
    Given a function, can you find its name? Why doesn't that make sense in R?

7.  Which base function has the most arguments? Hint: Start by making a list of all functions in the base package.

    ```{r}
    objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
    funs <- Filter(is.function, objs)
    ```

## Function composition {#function-composition}
\fontsize{13}{15}\sf

```{r}
square <- function(x) x^2
deviation <- function(x) x - mean(x)
x <- runif(100)
```

:::: {.columns}
::: {.column width="50%"}

Nesting:

```{r}
sqrt(mean(square(deviation(x))))
```

Intermediate variables:

```{r}
out <- deviation(x)
out <- square(out)
out <- mean(out)
out <- sqrt(out)
out
```
:::

::: {.column width="50%"}

Pipe:

```{r}
x |>
  deviation() |>
  square() |>
  mean() |>
  sqrt()
```

:::
::::

## Lexical scoping {#lexical-scoping}

Names defined inside a function mask names defined outside a function.

\fontsize{10}{10}\sf

```{r}
x <- 10
y <- 20
g02 <- function() {
  x <- 1
  y <- 2
  c(x, y)
}
g02()
```

## Lexical scoping

Names defined inside a function mask names defined outside a function.

\fontsize{10}{10}\sf

```{r}
x <- 2
g03 <- function() {
  y <- 1
  c(x, y)
}
g03()

# And this doesn't change the previous value of y
y
```

## Lexical scoping

Names defined inside a function mask names defined outside a function.

\fontsize{10}{10}\sf

```{r}
x <- 1
g04 <- function() {
  y <- 2
  i <- function() {
    z <- 3
    c(x, y, z)
  }
  i()
}
g04()
```

## Functions versus variables
\fontsize{10}{10}\sf

```{r}
g07 <- function(x) x + 1
g08 <- function() {
  g07 <- function(x) x + 100
  g07(10)
}
g08()
```

```{r}
g09 <- function(x) x + 100
g10 <- function() {
  g09 <- 10
  g09(g09)
}
g10()
```


## A fresh start {#fresh-start}

What happens to values between invocations of a function?

```{r}
#| echo: false
rm(a)
```

\fontsize{10}{9}\sf


```{r}
g11 <- function() {
  if (!exists("a")) {
    a <- 1
  } else {
    a <- a + 1
  }
  a
}

g11()
g11()
```

## Dynamic lookup
\fontsize{10}{10}\sf

```{r}
g12 <- function() x + 1
x <- 15
g12()

x <- 20
g12()
```

```{r}
codetools::findGlobals(g12)
```

\pause\alert{It is good practice to pass all the inputs to a function as arguments.}

## Lazy evaluation {#lazy-evaluation}

This code doesn't generate an error because `x` is never used:

```{r}
h01 <- function(x) {
  10
}
h01(stop("This is an error!"))
```

## Promises
\fontsize{13}{14}\sf

Lazy evaluation is powered by a data structure called a __promise__.

A promise has three components:

*   An expression, like `x + y`, which gives rise to the delayed computation.

*   An environment where the expression should be evaluated

*   A value, which is computed and cached the first time a promise is
    accessed when the expression is evaluated in the specified environment.

## Promises
\fontsize{10}{10}\sf

```{r}
y <- 10
h02 <- function(x) {
  y <- 100
  x + 1
}
h02(y)
```

## Promises
\fontsize{10}{10}\sf

```{r}
#| message: true
double <- function(x) {
  message("Calculating...")
  x * 2
}
h03 <- function(x) {
  c(x, x)
}
h03(double(20))
```

\pause\fontsize{13}{15}\sf

Promises are like a quantum state: any attempt to inspect them with R code will force an immediate evaluation, making the promise disappear.

## Default arguments

Thanks to lazy evaluation, default values can be defined in terms of other arguments, or even in terms of variables defined later in the function:

\fontsize{10}{10}\sf

```{r}
h04 <- function(x = 1, y = x * 2, z = a + b) {
  a <- 10
  b <- 100
  c(x, y, z)
}
h04()
```

\pause\alert{Not recommended!}

## Missing arguments: `sample()`
\fontsize{9}{9}\sf

```{r}
sample
```

## A better approach
\fontsize{9}{9}\sf


```{r}
sample <- function(x, size = NULL, replace = FALSE, prob = NULL) {
  if (is.null(size)) {
    size <- length(x)
  }
  x[sample.int(length(x), size, replace = replace, prob = prob)]
}
```

\vspace*{1cm}
\alert{Even simpler}

```{r}
sample <- function(x, size = NULL, replace = FALSE, prob = NULL) {
  size <- size %||% length(x)
  x[sample.int(length(x), size, replace = replace, prob = prob)]
}
```

## Quiz

8.  What does this function return? Why? Which principle does it illustrate?

    ```{r, results = "hide"}
    f2 <- function(x = z) {
      z <- 100
      x
    }
    f2()
    ```

## Quiz

9.  In `hist()`, the default value of `xlim` is `range(breaks)`, the default
    value for `breaks` is `"Sturges"`, and

    ```{r}
    range("Sturges")
    ```

    Explain how `hist()` works to get a correct `xlim` value.

## Quiz

10. Explain why this function works. Why is it confusing?

    ```{r}
    show_time <- function(x = stop("Error!")) {
      stop <- function(...) Sys.time()
      print(x)
    }
    show_time()
    ```

## `...`  (dot-dot-dot) {#fun-dot-dot-dot}

Allows for any number of additional arguments.

You can use `...` to pass additional arguments to another function.
\fontsize{10}{10}\sf

```{r}
i01 <- function(y, z) {
  list(y = y, z = z)
}
i02 <- function(x, ...) {
  i01(...)
}
str(i02(x = 1, y = 2, z = 3))
```

## `...`  (dot-dot-dot)

`list(...)` evaluates the arguments and stores them in a list:\fontsize{10}{10}\sf


```{r}
i04 <- function(...) {
  list(...)
}
str(i04(a = 1, b = 2))
```

## `...`  (dot-dot-dot)
\fontsize{13}{14}\sf

*   If your function takes a function as an argument, you want some way to
    pass additional arguments to that function.
*   If your function is an S3 generic, you need some way to allow methods to
    take arbitrary extra arguments.

\pause\alert{Two downsides:}

*   When you use it to pass arguments to another function, you have to
    carefully explain to the user where those arguments go.
*   A misspelled argument will not raise an error. This makes it easy for
    typos to go unnoticed:

\fontsize{10}{5}\sf

```{r}
sum(1, 2, NA, na_rm = TRUE)
```

## Quiz

11. Explain the following results: \fontsize{10}{10}\sf

    ```{r}
    sum(1, 2, 3)
    mean(1, 2, 3)

    sum(1, 2, 3, na.omit = TRUE)
    mean(1, 2, 3, na.omit = TRUE)
    ```


## Exiting a function

Most functions exit in one of two ways:

* return a value, indicating success
* throw an error, indicating failure.

## Implicit versus explicit returns

Implicit return, where the last evaluated expression is the return value:

\fontsize{10}{5}\sf

```{r}
j01 <- function(x) {
  if (x < 10) {
    0
  } else {
    10
  }
}
j01(5)
j01(15)
```

## Implicit versus explicit returns

Explicit return, by calling `return()`:

\fontsize{10}{5}\sf

```{r}
j02 <- function(x) {
  if (x < 10) {
    return(0)
  } else {
    return(10)
  }
}
j02(5)
j02(15)
```

## Invisible values {#invisible}

Most functions return visibly: calling the function in an interactive context prints the result.

```{r}
j03 <- function() 1
j03()
```

However, you can prevent automatic printing by applying `invisible()` to the last value:

```{r}
j04 <- function() invisible(1)
j04()
```

## Invisible values {#invisible}

The most common function that returns invisibly is `<-`:

```{r}
a <- 2
(a <- 2)
```

This is what makes it possible to chain assignments:

```{r}
a <- b <- c <- d <- 2
```

In general, any function called primarily for a side effect (like `<-`, `print()`, or `plot()`) should return an invisible value (typically the value of the first argument).

## Errors

If a function cannot complete its assigned task, it should throw an error with `stop()`, which immediately terminates the execution of the function.

\fontsize{10}{10}\sf

```{r, error = TRUE}
j05 <- function() {
  stop("I'm an error")
  return(10)
}
j05()
```

## Exit handlers {#on-exit}
\fontsize{10}{10}\sf

:::: {.columns}

::: {.column width="50%"}

```{r}
j06 <- function(x) {
  cat("Hello\n")
  on.exit(cat("Goodbye!\n"), add = TRUE)
  if (x) {
    return(10)
  } else {
    stop("Error")
  }
}
```

:::

::: {.column width="50%"}

```{r, error = TRUE}
j06(TRUE)
j06(FALSE)
```

:::
::::

## Exit handlers

`on.exit()` allows you to add clean-up code

\fontsize{10}{10}\sf

```{r}
with_dir <- function(dir, code) {
  old <- setwd(dir)
  on.exit(setwd(old), add = TRUE)
  code
}
getwd()
with_dir("~", getwd())
getwd()
```

## Function forms

###
> To understand computations in R, two slogans are helpful:
>
> * Everything that exists is an object.
> * Everything that happens is a function call.
>
> --- John Chambers

## Function forms

* __prefix__: the function name comes before its arguments, like
  `foofy(a, b, c)`.
* __infix__: the function name comes in between its arguments, like
  `x + y`.
* __replacement__: functions that replace values by assignment, like
  `names(df) <- c("a", "b", "c")`.
* __special__: functions like `[[`, `if`, and `for`.

## Rewriting to prefix form {#prefix-transform}

Everything can be written in prefix form.

```{r, eval = FALSE}
x + y
`+`(x, y)

names(df) <- c("x", "y", "z")
`names<-`(df, c("x", "y", "z"))

for(i in 1:10) print(i)
`for`(i, 1:10, print(i))
```

## Don't be evil!

```{r}
`(` <- function(e1) {
  if (is.numeric(e1) && runif(1) < 0.1) {
    e1 + 1
  } else {
    e1
  }
}
replicate(50, (1 + 2))
```

```{r}
#| echo: false
rm("(")
```

## Prefix form {#prefix-form}

You can specify arguments in three ways:

* By position, like `help(mean)`.
* By name, like `help(topic = mean)`.
* Using partial matching, like `help(top = mean)`.

## Infix functions

Functions with 2 arguments, and the function name comes between the arguments:

 `:`, `::`, `:::`, `$`, `@`, `^`, `*`, `/`, `+`, `-`, `>`, `>=`, `<`, `<=`, `==`, `!=`, `!`, `&`, `&&`, `|`, `||`, `~`, `<-`, and `<<-`.

```{r}
1 + 2
`+`(1, 2)
```

## Infix functions

You can also create your own infix functions that start and end with `%`.

```{r}
`%+%` <- function(a, b) paste0(a, b)
"new " %+% "string"
```

## Replacement functions {#replacement-functions}

* Replacement functions act like they modify their arguments in place, and have the special name `xxx<-`.
* They must have arguments named `x` and `value`, and must return the modified object.

```{r}
`second<-` <- function(x, value) {
  x[2] <- value
  x
}
x <- 1:10
second(x) <- 5L
x
```

## Replacement functions

```{r}
`modify<-` <- function(x, position, value) {
  x[position] <- value
  x
}
modify(x, 1) <- 10
x
```

When you write `modify(x, 1) <- 10`, behind the scenes R turns it into:

```{r, eval = FALSE}
x <- `modify<-`(x, 1, 10)
```

## Quiz

12. Clarify the following list of odd function calls:

    ```{r, eval = FALSE}
    x <- sample(replace = TRUE, 20, x = c(1:10, NA))
    y <- runif(min = 0, max = 1, 20)
    cor(m = "k", y = y, u = "p", x = x)
    ```

13. Write your own version of `+` that pastes its inputs together if they are character vectors but behaves as usual otherwise. In other words, make this code work:

    ```{r, eval = FALSE}
    1 + 2
    #> [1] 3

    "a" + "b"
    #> [1] "ab"
    ```

# Environments

## Environment basics

Environments are data structures that power scoping.

An environment is similar to a named list, with four important exceptions:

* Every name must be unique.
* The names in an environment are not ordered.
* An environment has a parent.
* Environments are not copied when modified.

## Environment basics

```{r}
library(rlang)
e1 <- env(
  a = FALSE,
  b = "a",
  c = 2.3,
  d = 1:3,
)
```

\placefig{8}{1.9}{width=7cm}{../diagrams/environments/bindings.png}

### Special environments

* The **current environment** is the environment in which code is currently executing.
* The **global environment** is where all interactive computation takes place. Your "workspace".

## Parent environments

:::: {.columns}
::: {.column width="50%"}

* Every environment has a parent.
* If a name is not found in an environment, R looks in the parent environment.
* The ancestors of the global environment include every attached package.

:::
::: {.column width="50%"}
\fontsize{10}{10}\sf\vspace*{-0.3cm}

```{r}
env_parents(e1, last = empty_env())
```
:::
::::

## Super assignment

* Regular assignment (`<-`) creates a variable in the current environment.
* Super assignment (`<<-`) modifies a variable in a parent environment.
* If it can't find an existing variable, it creates one in the global environment.

## Package environments
\fontsize{13}{15}\sf

* Every package attached becomes one of the parents of the global environment (in order of attachment).\fontsize{10}{10}\sf

  ```{r}
  search()
  ```

\fontsize{13}{15}\sf

* Attaching a package changes the parent of the global environment.
* `Autoloads` uses delayed bindings to save memory by only loading package objects when needed.

## Function environments
\fontsize{13}{14}\sf

A function binds the current environment when it is created.

\fontsize{10}{10}\sf

```{r}
y <- 1
f <- function(x) {
  env_print(current_env())
  x + y
}
f(2)
```

## Namespaces
\fontsize{13}{14}\sf

* Package environment: how an R user finds a function in an attached package (only includes exports)
* Namespace environment: how a package finds its own objects (includes non-exports as well)
* Each namespace environment has an imports environment (controlled via NAMESPACE file).

```{r}
#| echo: false
knitr::include_graphics("../diagrams/environments/namespace-env.png")
```

## Caller environments
\fontsize{10}{10}\sf

```{r}
f <- function(x) {
  g(x = 2)
}
g <- function(x) {
  h(x = 3)
}
h <- function(x) {
  stop()
}
```

```{r, eval = FALSE}
f(x = 1)
#> Error: in h(x = 3)
traceback()
#> 4: stop() at #3
#> 3: h(x = 3) at #3
#> 2: g(x = 2) at #3
#> 1: f(x = 1)
```

## Lazy evaluation

```{r, eval = FALSE}
a <- function(x) b(x)
b <- function(x) c(x)
c <- function(x) x
a(f())
#> Error: in h(x = 3)
traceback()
#> 7: stop() at #3
#> 6: h(x = 3) at #3
#> 5: g(x = 2) at #3
#> 4: f() at #1
#> 3: c(x) at #1
#> 2: b(x) at #1
#> 1: a(f())
unused argument (clas
```


# Conditions

## Conditions

```r
stop("This is what an error looks like")
#> Error in eval(expr, envir, enclos): This is what an error looks like

warning("This is what a warning looks like")
#> Warning: This is what a warning looks like

message("This is what a message looks like")
#> This is what a message looks like
```

\pause

* Ignore errors with `try()`.
* Ignore warnings with `suppressWarnings()`.
* Ignore messages with `suppressMessages()`.

## try()

* Allows execution to continue even if an error occurs.
* Returns a special object that captures the error.

\fontsize{10}{10}\sf

:::: {.columns}
::: {.column width="50%"}

```{r, error = TRUE}
f1 <- function(x) {
  log(x)
  10
}
f1("x")
```

:::
::: {.column width="50%"}

```{r, error = TRUE}
f2 <- function(x) {
  try(log(x))
  10
}
f2("a")
```

:::
::::

## Handling conditions
\fontsize{13}{15}\sf

Allow you to specify what should happen when a condition occurs.

```{r, eval = FALSE}
tryCatch(
  error = function(cnd) {
    # code to run when error is thrown
  },
  code_to_run_while_handlers_are_active
)
withCallingHandlers(
  warning = function(cnd) {
    # code to run when warning is signalled
  },
  message = function(cnd) {
    # code to run when message is signalled
  },
  code_to_run_while_handlers_are_active
)
```

## tryCatch()
\fontsize{10}{10}\sf

```{r}
f3 <- function(x) {
  tryCatch(
    error = function(cnd) NA,
    log(x)
  )
}

f3("x")
```

## Quiz

14. Does the following code throw an error when executed? Why or why not?

    ```{r, eval = FALSE}
    f2 <- function(a, b) {
      a * 10
    }
    f2(10, stop("This is an error!"))
    ```

## Quiz

15. What's the difference between these two commands?

    ```{r, eval = FALSE}
    catch_cnd(stop("An error"))
    catch_cnd(abort("An error"))
    ```

16. Explain the results of running this code:

    ```{r}
    withCallingHandlers(
      message = function(cnd) message("A"),
      message("B")
    )
    ```

## Quiz

17. Predict the results of evaluating the following code

    ```{r, eval = FALSE}
    show_condition <- function(code) {
      tryCatch(
        error = function(cnd) "error",
        warning = function(cnd) "warning",
        message = function(cnd) "message",
        {
          code
          5
        }
      )
    }
    show_condition(stop("!"))
    show_condition(10)
    show_condition(warning("?!"))
    ```
