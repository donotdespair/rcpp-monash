---
title: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming
author: "Week 6: Literate programming with Quarto"
format:
  presentation-beamer:
    fontsize: "14pt,t"
    section-titles: false
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: 
      - ../header.tex
      - preamble.tex
    colorlinks: true
    urlcolor: MonashBlue
    linkcolor: burntorange
---

```{r}
#| label: setup
#| include: false
#| cache: false
source(here::here("setup.R"))
source(here::here("course_info.R"))
```

# Literate programming

## Literate programming

 * Due to Donald Knuth (Stanford), 1984
 * A script or document that contains an explanation of the program logic in a natural language (e.g. English), interspersed with snippets of source code, which can be compiled and rerun.
 * Generates two representations\newline from a source file: formatted\newline documentation and "tangled" code.

\placefig{10.5}{4.6}{width = 6cm}{WEB.png}

## Literate programming

* As a programming approach, it never quite caught on.
* But it has become the standard approach for reproducible documents.

## Literate programming examples

* WEB (combining Pascal and TeX)
* roxygen2 comments
  * technically documentation generation rather than literate programming
  * documentation embedded in code, rather than code embedded in documentation
* Sweave documents
* Jupyter notebooks
* Rmarkdown documents
* Quarto documents

# roxygen2
## roxygen2

* roxygen2 documentation are just comments to R.
* roxygen2::roxygenize():
  * generates documentation from these comments in the form of Rd files
  * adds relevant lines to the NAMESPACE file.
* roxygen2::roxygenize() is called by devtools::document().
* Advantage: keeps documentation with the code. More readable, less chance for errors.

# Rmarkdown

## Markdown syntax
\fontsize{14}{16}\sf
Markdown: a "markup" language for formatting text.

* Headings:

    `# Heading 1`\newline
    `## Heading 2`

* **Bold**: `**bold**`.
* *Italic*: `*italic*`.
* Blockquotes:

    `> blockquote`.

## Markdown and Rmarkdown

* Markdown (markup language):
  * Extension either `.md` or `.markdown`.
  * Used in many places on the web, in note-taking apps, etc.

* Rmarkdown (markup language):
  * an extension of markdown that allows for embedded R code chunks.
  * Extension `.Rmd`.

* Rmarkdown (package):
  * an R package that allows for the conversion of `.Rmd` files to other formats.

## Rmarkdown files

* Structure:
  1. YAML header
  2. Markdown content
  3. R code chunks surrounded by `` ```{r} `` and `` ``` ``
  4. Inline R surrounded by `` `r `` and `` ` ``

* Rmarkdown documents can be compiled to HTML, PDF, Word, and other formats
* Compile with `rmarkdown::render("file.Rmd")`

## Rmarkdown, knitr and pandoc

* `rmarkdown::render()`
  * Uses `knitr` to run all code chunks, and "knit" the results into a markdown file (replacing R chunks with output).
  * Uses `pandoc` to convert the markdown file to the desired output format.
  * If PDF output is desired, LaTeX then converts the tex file (from pandoc output) to pdf.

\centerline{\includegraphics[width = 10cm]{rmd.png}}

## knitr functions

* `knitr::knit()`: knits a single Rmd file --- runs all code chunks and replaces them with output in a markdown file.
* `knitr::purl()`: extracts all R code from an Rmd file and saves it to a new file.
* `knitr::spin()`: knits a specially formatted R script file into an Rmd file.

## Rmarkdown packages

  * rmarkdown (to html, pdf, docx, odt, rtf, md, etc.)
  * bookdown (to html, pdf, epub)
  * blogdown (to html) -- uses hugo rather than pandoc
  * xaringan (to html) -- uses remark.js rather than pandoc
  * beamer (to pdf)
  * rticles (to pdf)
  * tufte (to html, pdf)
  * vitae (to pdf)
  * distill (to html)
  * flexdashboard (to html)

# Quarto

## Quarto
\fontsize{14}{16}\sf

* Generalization of Rmarkdown (not dependent on R)
* Supports R, Python, Javascript and Julia chunks by using either `knitr`, `jupyter` or `ObservableJS` engines.
* More consistent yaml header and chunk options.
* Many more output formats, and many more options for customizing format.
* Heavier reliance on pandoc Lua filters
* Uses pandoc templates for extensions

\centerline{\includegraphics[width = 10cm]{images/qmd.png}}

## Choose your engine

Specify the engine in the yaml header:

````{verbatim}
---
engine: knitr
---
````

````{verbatim}
---
engine: jupyter
jupyter: python3
---
````

**Default:** If any `{r}` blocks found, use `knitr` engine; otherwise use `jupyter` (with kernel determined by first block).

## Code chunks 

Chunk options use the hash-pipe `#|`

````{verbatim}
```{r}
#| label: fig-chunklabel
#| fig-caption: My figure
#| fig-width: 6
#| fig-height: 4
mtcars |>
  ggplot(aes(x = mpg, y = wt)) +
  geom_point()
```
````

Reference the figure using `@fig-chunklabel`.

## Chunk options

* Quarto consistently uses hyphenated options (`fig-width` rather than `fig.width`)
* The Rmarkdown `knitr` options are recognized for backwards compatibility.
* Options that are R expressions need to be prefaced by `!expr`

  ````{verbatim}
  ```{r}
  #| fig-cap: !expr paste("My figure", 1+1)
  ```
  ````

## Execute options

*   `execute` option in yaml header can be used instead of a `setup` chunk:

    ````{verbatim}
    execute:
      cache: true
      echo: false
      warning: false
    ````

## Some chunk options
\fontsize{14}{15}\sf\vspace*{-0.2cm}

* `label`: name of chunk. Useful for cross-references
* `eval`: whether to evaluate the code chunk
* `echo`: whether to display the code chunk
* `output`: whether to show chunk output
* `results: 'asis'` includes the output without markup
* `message`: whether to display messages
* `warning`: whether to display warnings
* `error: true`: continue even if code returns an error.
* `fig-cap`: caption for the figure
* `fig-width`, `fig-height`: width and height of the figure
* `cache`: whether to cache the code chunk
* `dependson`: cache dependencies

## Debugging

* The Quarto document is compiled in a different environment from your R console.
* If you get an error, try running all chunks (Ctrl+Alt+R).
* If you can't reproduce the error, check the working directory (add `getwd()` in a chunk).
* Try setting `error: true` on problem chunk to help you diagnose what happens. (But change it back!)
* Look at the intermediate files (`.md` or `.tex`) to see what is happening.

## Caching
\fontsize{14}{15}\sf

````{verbatim}
```{r}
#| cache: true
```
````

* When evaluating code chunks, knitr will save the results of chunks with caching to files to be reloaded in subsequent runs.
* Caching is useful when a chunk takes a long time to run.
* It will re-run if the code in the chunk changes in any way (even comments or spacing).
* Beware of inherited objects from earlier chunks. Without explicit dependencies, a chunk will not re-run if inherited objects change.
* Beware of dependence on external files.

## Caching

````{verbatim}
```{r}
#| label: chunk1
#| cache = TRUE
x <- 1
```

```{r}
#| label: chunk2
#| cache: true
#| dependson: "chunk1"
y <- x*3
```
````

## Caching

Cache will be rebuilt if:

* Chunk options change except `include`
* Any change in the code, even a space or comment
* An explicit dependency changes

Do not cache if:

 * setting R options like `options('width')`
 * setting knitr options like `opts_chunk$set()`
 * loading packages via `library()` if those packages are used by uncached chunks

## Caching with random numbers

````{verbatim}
```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
```
````

* `rand_seed` is an unevaluated expression.
* Each chunk will check if `.Random.seed` has been changed since the last run.
* If it has, the chunk will be re-run.

## Some caching options

* `cache-comments` If `false`, changing comments does not invalidate the cache.
* `cache-rebuild` Force rebuild of cache.
* `dependson` A character vector of labels of chunks that this chunk depends on.
* `autodep` If `true`, the dependencies are automatically determined. (May not be reliable.)

## Caching

Build automatic dependencies among chunks

````{verbatim}
```
execute:
  cache: true
  autodep: true
```
````

## Child documents

````{verbatim}
```{r}
#| child: file1.qmd, file2.qmd
```
````

\pause\alert{Conditional inclusion}

````{verbatim}
```{r}
#| child: !expr if(condition) 'file1.qmd' else 'file2.qmd'
```
````

\pause\alert{R Script files}

````{verbatim}
```{r}
#| file: "Rscript1.R"
```
````

* Better than `source("Rscript1.R")` because output of script included and dependencies tracked.

## Other language engines

````{verbatim}
```{python}
print("Hello Python!")
```
````

````{verbatim}
```{stata}
sysuse auto
summarize
```
````

* Python and Stata need to be installed with executables on `PATH`

## Other language engines

```{r}
#| echo: true
names(knitr::knit_engines$get())
```

## Extensions and templates
\fontsize{13}{17}\sf

* Quarto extensions modify and extend functionality.
* They are stored locally, in the `_extensions` folder alongside the qmd document.
* See <https://quarto.org/docs/extensions/> for a list.
* Templates are extensions used to define new output formats.
* Journal templates at\newline <https://quarto.org/docs/extensions/listing-journals.html>
* Monash templates at\newline <https://github.com/quarto-monash>

## quarto on the command line
\fontsize{14}{14.5}\sf\vspace*{-0.4cm}

* `quarto render` to render a quarto or Rmarkdown document.
* `quarto preview` to preview a quarto or Rmarkdown document.
* `quarto add <gh-org>/<gh-repo>` to add an extension from a github repository.
* `quarto update <gh-org>/<gh-repo>` to update an extension
* `quarto remove <gh-org>/<gh-repo>` to remove an extension
* `quarto list extensions installed`
* `quarto use template <gh-org>/<gh-repo>` to use existing repo as starter template.

## Add a custom format

From the CLI:\qquad  `quarto add quarto-monash/memo`\pause

New folder/files added

```{verbatim}
├── _extensions
│   └── quarto-monash
│       └── memo
│           └── ...
```

\pause

Update YAML

```{verbatim}
---
title: "My new file using the Monash memo format"
format: memo-pdf
---
```


## Activity 1

* Set up a new project.
* Create a quarto document using an html format.
* Add a code chunk to generate a figure with a caption.
* Reference the figure in the text using `@fig-chunklabel`.
* Add the monash memo extension and generate a pdf output.

## Activity 2

* Create a thesis using the `quarto-monash/thesis` template, and add your name and details to the front page.

# Monash Quarto Templates

## Letter template {.fragile}

\showtemplate{letter.pdf}
\only<2>{\begin{textblock}{9}(6.5,1)
\showyaml{letter.yml}
\end{textblock}}

## Memo template

\showtemplate{memo2.pdf}
\only<2>{\begin{textblock}{9}(6.5,1)
\showyaml{memo2.yml}
\end{textblock}}

## Memo template

\showtemplate{memo.pdf}
\begin{textblock}{9}(6.5,1)
\showyaml{memo.yml}
\end{textblock}

## Report template

\only<1-2>{\showtemplate{report.pdf}}
\only<3>{\showtemplate{report.pdf}[2]}
\only<2-3>{\begin{textblock}{9}(6.5,1)
\showyaml{report.yml}
\end{textblock}}

## Exam template

\only<1-2>{\showtemplate{exam.pdf}}
\only<3>{\showtemplate{exam.pdf}[2]}
\only<4>{\showtemplate{exam.pdf}[3]}
\only<2-4>{\begin{textblock}{9}(6.5,1)
\showyaml{exam.yml}
\end{textblock}}

## Presentation template

\only<2-3>{\showtemplate{pdfpresentation.pdf}}
\only<1>{\showtemplate{htmltemplate.png}}
\only<3>{\begin{textblock}{8.5}(7,.1)
\showyaml{presentation.yml}
\end{textblock}}
\only<4>{\begin{textblock}{8.5}(7,.1)
\showyaml{presentation2.yml}
\end{textblock}}
\only<4-5>{\showtemplate{presentation12.pdf}}
\only<6>{\showtemplate{presentation13.pdf}}

## Working paper template

\only<1-2>{\showtemplate{workingpaper.pdf}}
\only<3-4>{\showtemplate{workingpaper.pdf}[2]}
\only<5-6>{\showtemplate{workingpaper.pdf}[3]}

\only<2-3>{\begin{textblock}{9}(6.5,1)
\showyaml{workingpaper.yml}
\end{textblock}}
\only<4-6>{\begin{textblock}{9}(6.5,1)
\showyaml{workingpaper2.yml}
\end{textblock}}

\only<6>{\begin{textblock}{5.7}(10,6.5)
\begin{alertblock}{}\fontsize{10}{10}\sf
Add formats:
\begin{itemize}\tightlist
\item  \texttt{arxiv-pdf} for arXiv
\item a quarto journal format when submitting.
\end{itemize}
\end{alertblock}
\end{textblock}}

## Journal articles

\only<1>{\showtemplate{workingpaper.pdf}[3]}
\only<1>{\begin{textblock}{9}(6.5,1)
\showyaml{workingpaper3.yml}
\end{textblock}}
\only<2-3>{\showtemplate{ijf.pdf}}
\only<2-3>{\begin{textblock}{9}(6.5,1)
\showyaml{ijf.yml}
\end{textblock}}
\only<3>{\begin{textblock}{9}(6.5,7.2)
\begin{alertblock}{}\fontsize{12}{12}\sf
Add \texttt{+wp} to allow two pdf output files.
\end{alertblock}
\end{textblock}}

## Thesis template

\only<1-2>{\showtemplate{thesis.pdf}}
\only<3>{\showtemplate{thesis.pdf}[2]}
\only<4>{\showtemplate{thesis.pdf}[3]}
\only<5>{\showtemplate{thesis.pdf}[4]}
\only<6>{\showtemplate{thesis.pdf}[5]}
\only<7>{\showtemplate{thesis.pdf}[6]}
\only<8>{\showtemplate{thesis.pdf}[7]}
\only<9>{\showtemplate{thesis.pdf}[8]}
\only<10>{\showtemplate{thesis.pdf}[9]}
\only<11>{\showtemplate{thesis.pdf}[10]}
\only<12>{\showtemplate{thesis.pdf}[11]}
\only<13>{\showtemplate{thesis.pdf}[12]}
\only<14>{\showtemplate{thesis.pdf}[13]}
\only<15>{\showtemplate{thesis.pdf}[14]}
\only<16>{\showtemplate{thesis.pdf}[15]}

\begin{textblock}{9}(6.5,1)
\only<2-16>{\showyaml{thesis.yml}}
\end{textblock}}

## Thesis template

\centerline{\includegraphics[height=9cm]{thesis_html}}

## Design choices: Fonts

  * All templates use Fira Sans for headings.

  * All templates use `Source Code Pro` for code which has good disambiguation: `LIli1!| oO0 4AH 5S 7T`

  * All but presentation use Bitstream Vera for the body with a matching mathematical font:

\begin{block}{}
\centerline{\includegraphics[width=14cm]{sample_bera.pdf}}
\end{block}

## Design choices: Citations

All templates use biblatex with an author-year style consistent with most statistical journals.

\begin{block}{}
\centerline{\includegraphics[page=15, trim = 0 410 0 235, clip=true, width=16.3cm]{thesis.pdf}}
\end{block}

## Github repos: github.com/quarto-monash {.fragile}

\hspace*{-1cm}{\includegraphics[height=8cm]{github_repo}}

\only<2-3>{\begin{textblock}{6.9}(8.75,1.4)
\begin{block}{From a terminal}\fontsize{9.5}{10}\ttfamily
quarto use template quarto-monash/\rlap{$<$name$>$}
\begin{itemize}\tightlist
\item letter
\item memo
\item presentation
\item report
\item thesis
\item workingpaper
\item exam
\end{itemize}
\end{block}
\end{textblock}}

\only<3>{\begin{textblock}{6.9}(8.75,7)
\begin{block}{From the R console}\fontsize{9.5}{10}\ttfamily
monash::quarto\_template\_install(\inch$<$name$>$\inch)
\end{block}
\end{textblock}
}

## Structure of a template {.fragile}

\begin{textblock}{6}(0.2,1.3)\fontsize{10}{11}\ttfamily
\begin{Verbatim}
├── _extensions
│   │   └── quarto-monash
│   │       └── letter
│   │           ├── _extension.yml
│   │           ├── after-body.tex
│   │           ├── before-body.tex
│   │           ├── before-title.tex
│   │           ├── AACSB.png
│   │           ├── AMBA.png
│   │           ├── EQUIS.png
│   │           ├── MBSportrait.jpg
│   │           ├── monash2.png
│   │           └── sigfile.png
└── template.qmd
\end{Verbatim}
\end{textblock}

\only<2>{\begin{textblock}{7.3}(8,1.1)
\begin{block}{}\fontsize{13}{13}\sf
\begin{itemize}\tightlist
\item \texttt{template.qmd}: template for user to edit.
\item \texttt{extension.yml}: default yaml
\item \texttt{*.tex}: pandoc partials
\item Everything else: graphical files needed for the template
\end{itemize}
\end{block}
\end{textblock}}

\only<3>{\showfile{template.qmd}}
\only<4>{\showfile{extension.yml}}
\only<5>{\showfile{before-body.tex}}
\only<6>{\showfile{after-body.tex}}
\only<7>{\showfile{before-title.tex}}


## Pandoc partial templates
\fontsize{14}{15}\sf

* **doc-class.tex**: document class and options
* **before-title.tex**: preamble before title block.
* **title.tex**: create title block.
* **before-body.tex**: frontmatter, title page, abstract.
* **after-body.tex**: content at the end of the body.
* **toc.tex**: table of contents, lists of figures and tables.
* **before-bib.tex**: after content but before bibliography.
* **biblio.tex**: creates bibliography

###
\fontsize{13}{13}\sf

* **Details:** \url{https://quarto.org/docs/journals/templates.html}
* **Defaults:** \url{https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/pdf/pandoc}

# Assignment 2

## Activity 3

* Work on your Assignment 2.
* Ask for help if you need it.

